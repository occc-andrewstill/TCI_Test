<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/7/2014 8:46:16 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CKLAP806"
  DTS:CreatorName="CLERKS\tmudawi"
  DTS:DTSID="{9D225831-6FDB-49E3-A910-12EE9340B1D8}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="CitationImport08172015"
  DTS:PackageType="5"
  DTS:VersionBuild="1635"
  DTS:VersionGUID="{1F9F8811-C0E7-4A1B-AA07-E8B5B8A21EF7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ADO.NETConnectionManager]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{A9F31DAF-0F2D-4012-AF7C-F4E2EC26D3D4}"
      DTS:ObjectName="ADO.NETConnectionManager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=lsnodydev\florangedev;Initial Catalog=OdyClerkInternal;Integrated Security=True;Connect Timeout=0;Application Name=SSIS-CitationsPackage-{A9F31DAF-0F2D-4012-AF7C-F4E2EC26D3D4}CWTMSQL01\FLORANGEDEV.OdyClerkInternal1;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[cwtmsql01\florangedev.OdyClerkInternal]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{9CC5AF3C-6A09-49CA-9414-48FA83F33FE6}"
      DTS:ObjectName="cwtmsql01\florangedev.OdyClerkInternal">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=CWPMSQL01\FlorangeProd;Initial Catalog=OdyClerkInternal;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-CitationsPackage-{9CC5AF3C-6A09-49CA-9414-48FA83F33FE6}cwtmsql01\florangedev.OdyClerkInternal;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[FTPConnManager]"
      DTS:CreationName="FTP"
      DTS:DelayValidation="True"
      DTS:DTSID="{6745F7A9-17BA-4839-B37A-E26A2EE6F0D1}"
      DTS:ObjectName="FTPConnManager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString=":21">
          <DTS:FtpConnection
            DTS:ServerName=""
            DTS:UsePassiveMode="True">
            <DTS:Property
              DTS:Name="ServerPassword"
              Sensitive="1"
              Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAkaHbN5BqKEOTILl7GHOMOwAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABt/h7EDuKK4Mn17fH7lc5ZAAAAAASAAACgAAAAEAAAAJkpmElFNB4BDSO5xYlzBkcIAAAALqVwzaJAY5oUAAAA8MXwY3ez2zB58LlrVWlXNv4RcOY</DTS:Property>
          </DTS:FtpConnection>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP Connection Manager 1]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{D8C976EB-8496-4E36-B600-4655FBCE1933}"
      DTS:ObjectName="SMTP Connection Manager 1">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=mailrelay.MYORANGECLERK.NET ;UseWindowsAuthentication=True;EnableSsl=False;"
          ConnectByProxy="False" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{781E0134-B799-4461-A4A8-E0F23BAC120A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarAgencyName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{34EDEEB7-1FD8-40F6-BFA4-7DE4E6046727}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarCommandText">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CD0DCC94-507E-417A-91B5-7D8544F93F24}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarConnType">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D672D844-ABA7-4031-BF02-E878F21BEE22}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarDataFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56804705-2267-48AE-A65C-0BD0F3374191}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarLocalPath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5E51EE3A-3638-4848-B6AF-670C7D7B49CA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="VarQueryResult">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B942CC4D-B2EA-492A-A0FC-C464D01599C4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::VarRemotePath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarRemotePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E5C45341-6AA5-4076-8051-8A4D43A4B97A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9DD7486F-5E18-42E1-B0F6-ECC90CDE59D6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerPassword">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E5B26A54-15A7-452B-884D-42CEA9D82F5C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerPort">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8D10278C-81B6-4A19-9B30-9B9F4012BDF2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerUserName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C8A18A60-3014-4E9D-B8EF-F33AA8F35D20}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarSSHKey">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{69847AA9-EDA4-4756-8AF1-EADE7A5C91CA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarVendorAgencyID">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{294FC6C8-EBA6-4045-86E1-9176422C781C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarZipFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Delete Old Files Downloaded From SFTP Server"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{75A5F3E3-4BFF-400F-B741-26580B5FE3DB}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Delete Old Files Downloaded From SFTP Server"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Delete Old Files Downloaded From SFTP Server.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{6F5E4371-E05E-4B66-9FB4-A587AB0F45FB}"
          DTS:EventID="0"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{99768CE1-7D5D-44EC-AFB9-013BFA636BF7}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{92939E56-4D73-4E87-B627-11DB260DAFDD}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">0</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_947799ece6064c9983eaf572f8a03eaa"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Collections.Generic;
//using System.Linq;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            DeleteOldFiles();

            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void DeleteOldFiles()
        {
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            string AgencyName, LocalPath, RemotePath, VendorAgencyID;

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
            {
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    AgencyName = row["AgencyName"].ToString();
                    LocalPath = row["LocalPath"].ToString();
                    RemotePath = row["RemotePath"].ToString();
                    VendorAgencyID = row["VendorAgencyID"].ToString();

                    string[] AllFiles = Directory.GetFiles(LocalPath);

                    //Remove old Files to Processed folder then delete them from current folder
                    foreach (string Filename in AllFiles)
                    {
                        string FileExtension = Path.GetExtension(Filename);
                        string FileWithExtention = Path.GetFileName(Filename);

                        string Name = Path.GetFileNameWithoutExtension(Filename);

                        // This is to avoid missing the files in case the package fails right after downloading the files and before 
                        // moving them to the Processed folder T.M. 3-7-2016
                        /////////////////////////////////////////////////////////////////////////
                        if (File.Exists(LocalPath + "\\Processed\\" + FileWithExtention))
                        {
                            if (FileExtension == ".pdf" || FileExtension == ".PDF")
                            {
                                File.Delete(Filename);
                            }
                            else if (FileExtension == ".ZIP" || FileExtension == ".zip")
                            {
                                File.Delete(Filename);
                            }
                            else if (Name.Substring(Name.Length - 3) == "cit")
                            {
                                File.Delete(Filename);
                            }
                            else if (Name.Substring(Name.Length - 3) == "dat")
                            {
                                File.Delete(Filename);
                            }
                            else
                            { }
                        }
                        ////////////////////////////////////////////////////////////////////////
                        else
                        {
                        }
                    }
                }
            }
             conn.Close();
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="st_947799ece6064c9983eaf572f8a03eaa.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_947799ece6064c9983eaf572f8a03eaa.csproj</RootNamespace>
    <AssemblyName>ST_947799ece6064c9983eaf572f8a03eaa.csproj</AssemblyName>
    <ProjectGuid>{512B7A0B-EB8B-4354-894E-8ADA6FA70FC9}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Renci.SshNet, Version=2014.4.6.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\astill\source\Workspaces\Odyssey\TrafficCitationImport\ExternalLibraries\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_947799ece6064c9983eaf572f8a03eaa</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_947799ece6064c9983eaf572f8a03eaa</msb:DisplayName>
    <msb:ProjectId>{70B8673A-F9FF-4EDA-8DBD-736F961586D7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_947799ece6064c9983eaf572f8a03eaa.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Settings.get_Default():ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Sett" +
    "ings")]

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_947799ece6064c9983eaf572f8a03eaa.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_947799ece6064c9983eaf572f8a03eaa.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_947799ece6064c9983eaf572f8a03eaa.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFDj3mEAAAAAAAAAAOAAIiALATAAABYAAAAIAAAAAAAAEjUA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMA0AABPAAAAAEAAALgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAGBUAAAAgAAAAFgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAALgEAAAAQAAAAAYAAAAYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAD0
NAAAAAAAAEgAAAACAAUA5CIAACQRAAABAAAAAAAAAAg0AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4CKAIAAAYCKBAAAAoWbxEAAAoqGzADANgBAAABAAARAigQ
AAAKbxIAAApyAQAAcG8TAAAKFG8UAAAKdA8AAAEKcjMAAHAGcxUAAAoMcxYAAAoNCAlvFwAACiYJ
bxgAAApyLgEAcG8ZAAAKJglvGAAAChZvGgAACm8bAAAKbxwAAAoTBDg7AQAAEQRvHQAACnQlAAAB
JXJwAQBwbx4AAApvHwAACiYlcoYBAHBvHgAACm8fAAAKCyVymgEAcG8eAAAKbx8AAAomcrABAHBv
HgAACm8fAAAKJgcoIAAAChMFFhMGONEAAAARBREGmhMHEQcoIQAAChMIEQcoIgAAChMJEQcoIwAA
ChMKB3LOAQBwEQkoJAAACiglAAAKOZIAAAARCHLmAQBwKCYAAAotDhEIcvABAHAoJgAACiwJEQco
JwAACittEQhy+gEAcCgmAAAKLQ4RCHIEAgBwKCYAAAosCREHKCcAAAorSBEKEQpvKAAAChlZbykA
AApyDgIAcCgmAAAKLAkRBygnAAAKKyMRChEKbygAAAoZWW8pAAAKchYCAHAoJgAACiwHEQcoJwAA
ChEGF1gTBhEGEQWOaT8k////EQRvKgAACjq5/v//3h8RBHUTAAABEwsRCywHEQtvKwAACtwILAYI
bysAAArcBm8sAAAKKkE0AAACAAAAZAAAAE4BAACyAQAAFQAAAAAAAAACAAAALQAAAJoBAADHAQAA
CgAAAAAAAAAeAigtAAAKKh4CKC4AAAoqrn4BAAAELR5yHgIAcNADAAACKC8AAApvMAAACnMxAAAK
gAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIoMgAACioucwkAAAaAAwAABCoAAEJT
SkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAMgEAAAjfgAANAUAAFwHAAAjU3RyaW5n
cwAAAACQDAAAoAIAACNVUwAwDwAAEAAAACNHVUlEAAAAQA8AAOQBAAAjQmxvYgAAAAAAAAACAAAB
Vx2iAQkDAAAA+gEzABYAAAEAAAAtAAAABQAAAAYAAAAKAAAAAQAAADIAAAACAAAAEAAAAAEAAAAC
AAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAADwAwEAAAAAAAYAZQKWBQYA9AKWBQYAsQGDBQ8A
EQYAAAYA3gGjBAYASAKjBAYAKQKjBAYA2wKjBAYAhQKjBAYAngKjBAYA9QGjBAYAEAIYAwoAuQKf
AwoAAAGfAw4A+gQEBw4ATQUEBw4A4QY7AAYAXAWCBgYAagAtBAYANAQtBAYAlAGDBQYA2gYtBAYA
KwW2BQYAGwWOBBIAXQHaAxIAxQHaAxIANwF5BAYAeQGWBQoAyAOfAxYAmQarABYAOwWrAA4AUAUI
BQ4AtQQ7AA4AYAA7AA4AyQQ7AA4AHAE7AA4ALwc7AAYARAcKAAYARQMKAAYANAMtBAYAmgAKAA4A
2wQIBQYAywAtBAYAdgAtBAYAOwejBAAAAAABAAAAAAABAAEAAQAQAEUEVQM5AAEAAQAAABAAvQUg
BlkAAQAEAAABEAB5BiAGbQADAAgAAwEAALUGAABRAAQACwARADkE4AARAPAA5AARAFAA6AAGBjMA
7ABWgKUG7wBWgNAA7wBQIAAAAACGAEsEBgABAGQgAAAAAIYAYQYGAAEAfCIAAAAAhhh2BQYAAQCE
IgAAAACDGHYFBgABAIwiAAAAAJMIJwXzAAEAuCIAAAAAkwjYAPgAAQC/IgAAAACTCOQA/QABAMci
AAAAAJYI6QYDAQIAziIAAAAAhhh2BQYAAgDWIgAAAACRGHwFCAECAAAAAQASAwkAdgUBABEAdgUG
ABkAdgUKACkAdgUQADEAdgUQADkAdgUQAEEAdgUQAEkAdgUQAFEAdgUQAFkAdgUQAGEAdgUQAGkA
dgUGAKkAdgUGANEAdgUVAOEAdgUGAHEArQYbAOkA9QYBAOkAlQY1APEAJAQ6APkA6ARAAIEAdgVF
AIkAdgUGAAEBHwRMAIkAVgZSAAkBJARYAAkBJARfABEBygZmACEBaAVsAJEAGgdxACkBJAR1ALEA
MgN6ADEBcAZ+ADkBUASEADkBnwCEADkBXQSEAEEB0waJAEkBwwaQAEEBTgeVAEkBcgGbAEEBSgOg
AEEBOwOkAJEAJgepAJkAVQEGAFEBTwEGAHEAdgUGALEAdgUGAFkBiACtAFkBNwe2ALkAdgW8ANkA
dgUGAAgAFADWAAgAGADbACkAcwBDAS4ACwAbAS4AEwAkAS4AGwBDAS4AIwBMAS4AKwB8AS4AMwB8
AS4AOwB8AS4AQwBMAS4ASwCCAS4AUwB8AS4AWwCZAUMAYwDbAEkAcwBDAWEAewDbAGMAawDbACAA
AwABAAQAAwAAACsFDAEAAPgAEQEAAO0GFgECAAUAAwACAAYABQABAAcABQACAAgABwAEgAAAAQAA
AG8fgEEAAAAAAABVAwAABAAAAAAAAAAAAAAAxABHAAAAAAAPAAAAAAAAAAAAAADNAIADAAAAAAQA
AAAAAAAAAAAAAMQAOwAAAAAABAAAAAAAAAAAAAAAxAAtBAAAAAAPAAAAAAAAAAAAAADNABQAAAAA
AAAAAAABAAAAxwUAAAUAAgAAAAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNl
AERhdGFUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBGaWxlAEdldEZpbGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEZWxldGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJp
YnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAU3Vic3RyaW5n
AFBhdGgAZ2V0X0xlbmd0aABTVF85NDc3OTllY2U2MDY0Yzk5ODNlYWY1NzJmOGEwM2VhYS5jc3By
b2oATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AFNUXzk0Nzc5OWVjZTYwNjRjOTk4M2VhZjU3MmY4YTAzZWFhLmNzcHJvai5kbGwARmlsbABnZXRf
SXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAEdldEV4dGVuc2lvbgBHZXRG
aWxlTmFtZVdpdGhvdXRFeHRlbnNpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29sbGVjdGlvbgBEYXRhUm93Q29s
bGVjdGlvbgBEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0
ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9u
TWFuYWdlcgBTcWxEYXRhQWRhcHRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5j
Y3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBT
eXN0ZW0uUmVzb3VyY2VzAFNUXzk0Nzc5OWVjZTYwNjRjOTk4M2VhZjU3MmY4YTAzZWFhLmNzcHJv
ai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfOTQ3Nzk5
ZWNlNjA2NGM5OTgzZWFmNTcyZjhhMDNlYWEuY3Nwcm9qLlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBE
ZWxldGVPbGRGaWxlcwBHZXRGaWxlcwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nv
bm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAEV4aXN0cwBnZXRfUm93cwBD
b25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRh
dGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AE1vdmVOZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AERp
cmVjdG9yeQBvcF9FcXVhbGl0eQAAAAAxQQBEAE8ALgBOAEUAVABDAG8AbgBuAGUAYwB0AGkAbwBu
AE0AYQBuAGEAZwBlAHIAAID5UwBlAGwAZQBjAHQAIABBAGcAZQBuAGMAeQBOAGEAbQBlACwAIABM
AG8AYwBhAGwAUABhAHQAaAAsACAAUgBlAG0AbwB0AGUAUABhAHQAaAAsACAAVgBlAG4AZABvAHIA
QQBnAGUAbgBjAHkASQBEACAARgByAG8AbQAgAFQAcgBhAGYAZgBpAGMAQwBpAHQAYQB0AGkAbwBu
AF8AQQBnAGUAbgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAgAHcAaQB0AGgAIAAoAG4AbwBsAG8A
YwBrACkAIABXAGgAZQByAGUAIABBAGMAdABpAHYAZQAgAD0AMQAAQVQAcgBhAGYAZgBpAGMAQwBp
AHQAYQB0AGkAbwBuAF8AQQBnAGUAbgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAAFUEAZwBlAG4A
YwB5AE4AYQBtAGUAABNMAG8AYwBhAGwAUABhAHQAaAAAFVIAZQBtAG8AdABlAFAAYQB0AGgAAB1W
AGUAbgBkAG8AcgBBAGcAZQBuAGMAeQBJAEQAABdcAFAAcgBvAGMAZQBzAHMAZQBkAFwAAAkuAHAA
ZABmAAAJLgBQAEQARgAACS4AWgBJAFAAAAkuAHoAaQBwAAAHYwBpAHQAAAdkAGEAdAAAf1MAVABf
ADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYAOABhADAA
MwBlAGEAYQAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAAAFgl93b7f5FDsXkrGs49tNkABCABAQgDIAABBSABARERBCABAQ4FIAEBEWUEIAAS
dRQHDBI9DhJBEkUSSR0OCA4ODg4STQQgABJ5BSABEn0cBCABHBwGIAIBDhI9BSABCBJFBSAAEoCF
BiABEoCJDgYgARKAiQgFIAASgI0EIAASSQMgABwEIAEcDgMgAA4FAAEdDg4EAAEODgYAAw4ODg4E
AAECDgUAAgIODgQAAQEOAyAACAQgAQ4IAyAAAggAARKArRGAsQUgABKAtQcgAgEOEoC1CLd6XFYZ
NOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEl0DBhJhAwYSEAIGCAMGERQEAAASXQQAABJhBQABARJh
BAAAEhADAAABBAgAEl0ECAASYQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzAQgBAAIAAAAAAC8BACpTVF85NDc3OTllY2U2MDY0Yzk5ODNlYWY1NzJmOGEwM2VhYS5j
c3Byb2oAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNAAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAA
AM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2
MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQ
QURQQURQtAAAAOg0AAAAAAAAAAAAAAI1AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0NAAAAAAA
AAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAFoEAAAAAAAAAAAAAFoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQCAQW8fAAABAIBBbx8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAS6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAACWAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYA
OABhADAAMwBlAGEAYQAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBv
AG4AAAAAADEALgAwAC4AOAAwADQANwAuADEANgA3ADYAOAAAAAAAfgAvAAEASQBuAHQAZQByAG4A
YQBsAE4AYQBtAGUAAABTAFQAXwA5ADQANwA3ADkAOQBlAGMAZQA2ADAANgA0AGMAOQA5ADgAMwBl
AGEAZgA1ADcAMgBmADgAYQAwADMAZQBhAGEALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAxADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAIYA
LwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA5ADQANwA3ADkAOQBl
AGMAZQA2ADAANgA0AGMAOQA5ADgAMwBlAGEAZgA1ADcAMgBmADgAYQAwADMAZQBhAGEALgBjAHMA
cAByAG8AagAuAGQAbABsAAAAAAB2ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABf
ADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYAOABhADAA
MwBlAGEAYQAuAGMAcwBwAHIAbwBqAAAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADgAMAA0ADcALgAxADYANwA2ADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwA
eQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAMAA0ADcALgAxADYANwA2ADgAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAUNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task 1"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{67D19327-9040-42C4-9B2E-92A8E8C63968}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task 1"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Execute SQL Task 1.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{104386C1-3849-4AA5-99FF-2C3A29872E0F}"
          DTS:EventID="0"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{E96D9771-A5D0-43AB-83F8-0C60912DCD7A}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{ABC58C92-8BF7-4B60-8D26-FD57595A47C6}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">0</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9CC5AF3C-6A09-49CA-9414-48FA83F33FE6}"
          SQLTask:SqlStatementSource="SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath, SSHKey&#xA;FROM     dbo.TrafficCitation_AgencyVendorInfo with (nolock)&#xA;WHERE  Active = 1 &#xA;AND AgencyName NOT IN('Winter Garden','Oakland')"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::VarQueryResult" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::VarAgencyName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::VarConnType"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::VarServerName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::VarServerUserName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="4"
            SQLTask:DtsVariableName="User::VarServerPassword"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="5"
            SQLTask:DtsVariableName="User::VarServerPort"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="2"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="6"
            SQLTask:DtsVariableName="User::VarLocalPath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="7"
            SQLTask:DtsVariableName="User::VarRemotePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="8"
            SQLTask:DtsVariableName="User::VarSSHKey"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container 1"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{168C199E-1920-40B5-907C-C0BC63FDDDAD}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container 1">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{753F1A76-E0BC-4EC7-9DB1-380C20F5E89F}"
        DTS:ObjectName="{174A74E8-015A-4530-89EE-DEF4A41B1D87}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::VarQueryResult" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\Delete Zip Files From FTP Server after Downloading"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:Disabled="True"
          DTS:DTSID="{7CA1893D-8D0A-4AED-BFB0-A9C06D6F5DF8}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete Zip Files From FTP Server after Downloading"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Delete Zip Files From FTP Server after Downloading.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{3FC80DDE-363B-4EA7-AE60-064C565F7B55}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{D3C18A26-A246-41D2-AA53-7FDC302B2D46}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:DTSID="{57C0C182-8E99-4C74-A8C7-A17A0A23D52E}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="User"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">0</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_c298d4749e8b4114ba744da88514fc4c"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::VarConnType,User::VarLocalPath">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c298d4749e8b4114ba744da88514fc4c.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c298d4749e8b4114ba744da88514fc4c.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="st_c298d4749e8b4114ba744da88514fc4c.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_c298d4749e8b4114ba744da88514fc4c.csproj</RootNamespace>
    <AssemblyName>ST_c298d4749e8b4114ba744da88514fc4c.csproj</AssemblyName>
    <ProjectGuid>{B5923C1C-30B5-4D14-9641-F4C305C33383}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Net.Mail;
using System.Reflection;

namespace ST_c298d4749e8b4114ba744da88514fc4c.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
        public void Main()
        {
            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;

            //Locate the zip file at the ftp server
            //LocateZipFile();

            LocateAgency();

           // CheckZipFileReceived();
        }

        void LocateAgency()
        {
            // Added Try and Catch to this function T.M. 10/9/2017
            try {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName = null;

                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'FTP' AND Active = 1 AND AgencyName IN('FHP', 'Ocoee', 'Apopka-RedLight', 'Ocoee-RedLight', 'Orlando-RedLight', 'CFX')", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();

                        LocateZipFile(AgencyName);
                    }
                }
                // If connection still open close it  T.M. 10/9/2017
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at FTP Side - Delete Zip Files Script Task at LocateAgency Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        void LocateZipFile(string agency)
        {
            try {
                List<string> files = new List<string>();

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName, serverUri = null, ftpUsername = null, ftpPassword = null, RemotePath = null;

                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE AgencyName = '" + agency + "'", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        RemotePath = row["RemotePath"].ToString();
                        serverUri = "ftp://" + row["ServerName"].ToString() + RemotePath;
                        ftpUsername = row["ServerUserName"].ToString();
                        ftpPassword = row["ServerPassword"].ToString();
                        AgencyName = row["AgencyName"].ToString();

                        //////////// Call method to fix FtpWebRequest  T. M. 3/4/2016 ///////////////////////////////
                        SetMethodRequiresCWD();

                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);
                        request.Method = WebRequestMethods.Ftp.ListDirectory;

                        // Add the follwing 3/4/2016
                        request.Timeout = 600000;
                        request.ReadWriteTimeout = 600000;

                        //If you need to use network credentials
                        request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);

                        // Add the follwing 3/4/2016
                        request.UsePassive = true;
                        request.UseBinary = true;
                        request.KeepAlive = false;

                        FtpWebResponse response = (FtpWebResponse)request.GetResponse();

                        Stream responseStream = response.GetResponseStream();
                        StreamReader reader = new StreamReader(responseStream);

                        while (!reader.EndOfStream)
                        {
                            files.Add(reader.ReadLine());
                            foreach (string file in files)
                            {
                                /**** Check if file exist  T.M. 8/7/2015  ***/
                                //if (File.Exists(file))
                                //{
                                // --> DeleteFTPFiles(file, agency);   // comment for now
                                CheckFileExist(file, agency);
                                //}
                            }
                        }
                        response.Close();
                    }
                }
                // added 5-7-15
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at FTP Side - Delete Zip Files Script Task at LocateZipFile Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        // Check if files exist in FTP server
        void CheckFileExist(string file, string agency)
        {
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE AgencyName = '" + agency + "'", conn))
            {
                try
                {
                    string serverUri = null, ftpUsername = null, ftpPassword = null, RemotePath = null;

                    DateTime date = DateTime.Now;
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {

                        RemotePath = row["RemotePath"].ToString();
                        serverUri = "ftp://" + row["ServerName"].ToString() + RemotePath + file;
                        ftpUsername = row["ServerUserName"].ToString();
                        ftpPassword = row["ServerPassword"].ToString();

                        //////////// Call method to fix FtpWebRequest  T. M. 3/4/2016 ///////////////////////////////
                        SetMethodRequiresCWD();

                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);

                        //If you need to use network credentials
                        request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);

                        /****** Delete the file from FTP server only if it is available T.M. 8/7/2015 ****/
                        request.Method = WebRequestMethods.Ftp.GetFileSize;

                        // Add the follwing 3/4/2016
                        request.Timeout = 600000;
                        request.ReadWriteTimeout = 600000;
                        request.UsePassive = true;
                        request.UseBinary = true;
                        request.KeepAlive = false;

                        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                        {
                            continue;
                            //response.Close();
                        }
                        else
                        {
                            DeleteFTPFiles(file, agency);
                        }

                        response.Close();
                        /****************  End of checking file ****************/
                    }
                }
                catch (WebException e)
                {
                    String status = ((FtpWebResponse)e.Response).StatusDescription;
                }
                // added 5-7-15
                finally
                {
                    conn.Close();
                }
            }
        }

        //delete the zip file from ftp server after downloading
        void DeleteFTPFiles(string zipfile, string agency)
        {
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE AgencyName = '" + agency + "'", conn))
            {
                try
                {
                    string serverUri = null, ftpUsername = null, ftpPassword = null, RemotePath = null;

                    DateTime date = DateTime.Now;
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {

                        RemotePath = row["RemotePath"].ToString();
                        serverUri = "ftp://" + row["ServerName"].ToString() + RemotePath + zipfile;
                        ftpUsername = row["ServerUserName"].ToString();
                        ftpPassword = row["ServerPassword"].ToString();

                        //////////// Call method to fix FtpWebRequest  T. M. 3/4/2016 ///////////////////////////////
                        SetMethodRequiresCWD();

                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);

                        //If you need to use network credentials
                        request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);


                        request.Method = WebRequestMethods.Ftp.DeleteFile;

                        

                        // Add the follwing 3/4/2016
                        request.Timeout = 600000;
                        request.ReadWriteTimeout = 600000;
                        request.UsePassive = true;
                        request.UseBinary = true;
                        request.KeepAlive = false;

                        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                        response.Close();
                    }
                }
                catch (WebException ex)
                {
                    String erText = ((FtpWebResponse)ex.Response).StatusDescription;
                    if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                    erText = erText.Replace("'", "");
                    LogScriptError(erText + " Error at FTP Side - Delete Zip Files Script Task at DeleteFTPFiles Function" );
                }
                catch (Exception ex)
                {
                    // string testString = ex.Message.ToString();
                    string erText = ex.Message;
                    if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                    erText = erText.Replace("'", "");
                    LogScriptError(erText + " Error at FTP Side - Delete Zip Files Script Task at DeleteFTPFiles Function");

                    // comment throw T.M 11/8/2017
                    //throw;
                }
                // added 5-7-15
                finally
                {
                    conn.Close();
                }
            }
            // if connection still open close it T.M. 10/9/2017
            if(conn.State == ConnectionState.Open)
            {
                conn.Close();
            }
        }

        ////////////////// Method to call to fix FtpWebRequest T. M. 3/4/2016 //////////////////////////////////////////////

        private static void SetMethodRequiresCWD()
        {
            Type requestType = typeof(FtpWebRequest);
            FieldInfo methodInfoField = requestType.GetField("m_MethodInfo", BindingFlags.NonPublic | BindingFlags.Instance);
            Type methodInfoType = methodInfoField.FieldType;


            FieldInfo knownMethodsField = methodInfoType.GetField("KnownMethodInfo", BindingFlags.Static | BindingFlags.NonPublic);
            Array knownMethodsArray = (Array)knownMethodsField.GetValue(null);

            FieldInfo flagsField = methodInfoType.GetField("Flags", BindingFlags.NonPublic | BindingFlags.Instance);

            int MustChangeWorkingDirectoryToPath = 0x100;
            foreach (object knownMethod in knownMethodsArray)
            {
                int flags = (int)flagsField.GetValue(knownMethod);
                flags |= MustChangeWorkingDirectoryToPath;
                flagsField.SetValue(knownMethod, flags);
            }
        }

        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }


        ////////////////////////////////////////*** OLD COde Down *****/////////////////////////////////////////////////////////////////
        //void LocateZipFile()
        //{
        //    List<string> files = new List<string>();

        //    SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

        //    string AgencyName, serverUri = null, ftpUsername = null, ftpPassword = null, RemotePath = null;

        //    DateTime date = DateTime.Now;

        //    using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo WHERE ConnectionType = 'FTP' AND Active = 1", conn))
        //    {
        //        DataSet dataSet = new DataSet();
        //        dataAdapter.Fill(dataSet);
        //        DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

        //        foreach (DataRow row in dataSet.Tables[0].Rows)
        //        {
        //            RemotePath = row["RemotePath"].ToString();
        //            serverUri = "ftp://" + row["ServerName"].ToString() + RemotePath;
        //            ftpUsername = row["ServerUserName"].ToString();
        //            ftpPassword = row["ServerPassword"].ToString();
        //            AgencyName = row["AgencyName"].ToString();

        //            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);
        //            request.Method = WebRequestMethods.Ftp.ListDirectory;

        //            //If you need to use network credentials
        //            request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);

        //            FtpWebResponse response = (FtpWebResponse)request.GetResponse();

        //            Stream responseStream = response.GetResponseStream();
        //            StreamReader reader = new StreamReader(responseStream);

        //            while (!reader.EndOfStream)
        //            {
        //                files.Add(reader.ReadLine());   
        //                foreach (string file in files)
        //                {
        //                    //if (file.IndexOf(".", StringComparison.CurrentCultureIgnoreCase) != -1)
        //                    //{

        //                        string fileExtension = file.Substring(file.Length - 3);
        //                        //if (AgencyName == "Orange_County_Clerk_Test" && file.Substring(0, 6).Equals("ORANGE") && (fileExtension == "zip" || fileExtension == "ZIP"))
        //                        if (AgencyName == "FHP" && file.Substring(0, 6).Equals("ORANGE") && (fileExtension == "zip" || fileExtension == "ZIP"))
        //                        {
        //                            if (conn.State == ConnectionState.Open)
        //                            {
        //                                conn.Close();
        //                                if (conn.State == ConnectionState.Open)
        //                                {
        //                                    conn.Close();
        //                                }
        //                                DeleteFTPFiles(file);
        //                            }
        //                            conn.Open();
        //                        }
        //                        if (AgencyName == "Ocoee" /* && file.Substring(0, 6).Equals("ORANGE") && (fileExtension == "zip" || fileExtension == "ZIP") */)
        //                        {
        //                            if (conn.State == ConnectionState.Open)
        //                            {
        //                                conn.Close();
        //                                if (conn.State == ConnectionState.Open)
        //                                {
        //                                    conn.Close();
        //                                }
        //                                DeleteFTPFiles(file);
        //                            }
        //                            conn.Open();
        //                        }
        //                        //if (AgencyName == "Winter_Park_Red" && file.Substring(0, 5).Equals("07054") && (fileExtension == "zip" || fileExtension == "ZIP"))
        //                        if (AgencyName == "Winter_Park_Red" && (fileExtension == "zip" || fileExtension == "ZIP"))
        //                        {
        //                            if (conn.State == ConnectionState.Open)
        //                            {
        //                                conn.Close();
        //                                DeleteFTPFiles(file);
        //                            }
        //                        }
        //                   // }
        //                }
        //            }
        //            response.Close();
        //        }
        //    }
        //    // added 5-7-15
        //    conn.Close();
        //}

        ////delete the zip file from ftp server after downloading
        //void DeleteFTPFiles(string zipfile)
        //{
        //             SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

        //            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo WHERE ConnectionType = 'FTP' AND Active = 1", conn))
        //            {
        //                try
        //                {
        //                    string serverUri = null, ftpUsername = null, ftpPassword = null, RemotePath = null;

        //                    DateTime date = DateTime.Now;
        //                    DataSet dataSet = new DataSet();
        //                    dataAdapter.Fill(dataSet);
        //                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

        //                    foreach (DataRow row in dataSet.Tables[0].Rows)
        //                    {

        //                        RemotePath = row["RemotePath"].ToString();
        //                        serverUri = "ftp://" + row["ServerName"].ToString() + RemotePath + zipfile;
        //                        ftpUsername = row["ServerUserName"].ToString();
        //                        ftpPassword = row["ServerPassword"].ToString();

        //                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);

        //                        //If you need to use network credentials
        //                        request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);

        //                        request.Method = WebRequestMethods.Ftp.DeleteFile;
        //                        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
        //                        response.Close();
        //                    }
        //                }
        //                catch (WebException e)
        //                {
        //                    String status = ((FtpWebResponse)e.Response).StatusDescription;
        //                }
        //                // added 5-7-15
        //                finally
        //                {
        //                    conn.Close();
        //                }
        //            }          
        // }

        /// <summary>
        /// /////////////////////////////////////////*** End Old Code ***///////////////////////////////////////////////////////////////////////////////
        /// </summary>

        void CheckZipFileReceived()
        {
            if (Dts.Variables["User::VarConnType"].Value.ToString() == "FTP")
            {
                string agency = null;
                string path = Dts.Variables["User::VarLocalPath"].Value.ToString();
                int pos = path.LastIndexOf("\\") + 1;
                agency = path.Substring(pos, path.Length - pos);
                DirectoryInfo di = new DirectoryInfo(Dts.Variables["User::VarLocalPath"].Value.ToString());
                FileInfo[] ZipFiles = di.GetFiles("*.zip");
                if (ZipFiles.Length == 0)
                {
                    sendMail(agency);
                }
            }
        }

        void sendMail(string agencyName)
        {
            MailMessage mail = new MailMessage("TraffiCitation_Import@myorangeclerk.com", "Tarig.Mudawi@myorangeclerk.com, Anthony.Payne@Myorangeclerk.com");
            SmtpClient client = new SmtpClient();
            client.Port = 25;
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            client.UseDefaultCredentials = false;
            client.Host = "mailrelay.MYORANGECLERK.NET";
            mail.Subject = "No file Available for " + agencyName;
            mail.Body = "No file received today " + DateTime.Now.ToString("M/d/yyyy") + " for " + agencyName;
            client.Send(mail);
        }
     }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_c298d4749e8b4114ba744da88514fc4c</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_c298d4749e8b4114ba744da88514fc4c</msb:DisplayName>
    <msb:ProjectId>{2B364142-64A9-44B1-9912-F2539650D310}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_c298d4749e8b4114ba744da88514fc4c.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Settings.get_Default():ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Sett" +
    "ings")]

namespace ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c298d4749e8b4114ba744da88514fc4c.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_c298d4749e8b4114ba744da88514fc4c.csproj.dll">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
CAAJLAAAAACWCLoJKQIJABAsAAAAAIYY5QcGAAkAGCwAAAAAkRjrBxICCQAAAAEAfgoAAAEAmwEA
AAIAfgoAAAEAmAEAAAIAfgoAAAEAxAcAAAEAoAEAAAEAiwQJAOUHAQARAOUHBgAZAOUHCgApAOUH
EAAxAOUHEAA5AOUHEABBAOUHEABJAOUHEABRAOUHEABZAOUHEABhAOUHEABpAOUHBgARAeUHBgAx
AeUHFQBBAeUHBgBxAG4JHABJAcYJAQBJAVYJMwBRASMGOQBZAdIGQAABAVsKRQCBAOUHSwCJAOUH
BgBhAfwFUgCJAMUIWABpASMGXgBpASMGZQBxAYQJbACBAdcHcgCRAPYJdwCxACMGewDpAOkEgACR
AFIKhACZAJgCBgCJAZICBgChAC8BgAChAP8GiACRAY0JjQCRAfoAlACRAY0JmgAMAOUHBgCZAaAC
ygCZAckAEACZATEKAQChAT0KAQCpAeUH0QCZARkJ1wChAZ8E3gChAZsK3gChAZEE3gCZAYYC4wC5
AQEG6QDBAOUH7wDJAdQBgAAMAI0A9gAMANcH/AAUAPYJCwEUAFIKhADBABMGhAC5AZICBgCRAY0J
JAG5ABIBLAHRAGoC4wC5ABIHgACJAacCSgHhAXgBXgHhAaYAZwHhAN0BcAHhAHkEQADZANcHcgDh
AIIEdgHxAOUHEABZAdQEgAB5AOUHEADxALYGgwGJAUQGBgABAqkKiQFJAdAIkwEJAiMGmQERAm8E
dwCRAbkKoAGRAa4EpgGRAfwEiQGRAfIEqwEZAuUHEAAZAu0IsQH5AOUH0QApAuUHBgApAgIKAQAp
AtQAwQEpAikJ3gApAigKEAD5AJsJEAABAekEyAH5AIUKEAApAsQAzQFxAOUHBgDpAOUHBgDhAY4K
0wEZAeUH2QE5AeUHBgAIABQA8wEIABgA+AEpAHMAZwIuAAsAPwIuABMASAIuABsAZwIuACMAcAIu
ACsAoAIuADMAoAIuADsAoAIuAEMAcAIuAEsApgIuAFMAoAIuAFsAvQJDAGMA+AFJAHMAZwJhAHsA
+AFjAGsA+AEiAKAAEAEyAVABfAGNAbkBAwABAAQAAwAAAIQHLgIAABMCNAIAAL4JOgICAAwAAwAC
AA0ABQABAA4ABQACAA8ABwDEAAUBBIAAAAEAAABvH0JBAAAAAAAABwUAAAQAAAAAAAAAAAAAAOEB
aQAAAAAADwAAAAAAAAAAAAAA6gEyBQAAAAAEAAAAAAAAAAAAAADhAV0AAAAAAAQAAAAAAAAAAAAA
AOEBLAYAAAAADwAAAAAAAAAAAAAA6gE2AAAAAAAAAAAAAQAAADYIAAAFAAIAAAAATGlzdGAxAElu
dDMyADxNb2R1bGU+AFNldE1ldGhvZFJlcXVpcmVzQ1dEAFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29s
bGVjdGlvbnMuR2VuZXJpYwBBZGQAQ2hlY2taaXBGaWxlUmVjZWl2ZWQAR2V0RmllbGQARGJDb21t
YW5kAFNxbENvbW1hbmQAU2VuZABzZXRfTWV0aG9kAHNldF9EZWxpdmVyeU1ldGhvZABTbXRwRGVs
aXZlcnlNZXRob2QAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X1N0YXR1c0NvZGUARnRwU3Rh
dHVzQ29kZQBnZXRfTWVzc2FnZQBNYWlsTWVzc2FnZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bv
c2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATG9jYXRlWmlwRmlsZQB6
aXBmaWxlAGFnZW5jeU5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGlt
ZQBSZWFkTGluZQBnZXRfRmllbGRUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUA
cmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFD
b2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBnZXRfUmVzcG9uc2UARnRwV2Vi
UmVzcG9uc2UAR2V0UmVzcG9uc2UAQ2xvc2UARGlzcG9zZQBDcmVhdGUAZ2V0X1N0YXRlAEVkaXRv
ckJyb3dzYWJsZVN0YXRlAENvbm5lY3Rpb25TdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAEdldFZh
bHVlAFNldFZhbHVlAHZhbHVlAHNldF9LZWVwQWxpdmUAc2V0X1VzZVBhc3NpdmUATGFzdEluZGV4
T2YAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBnZXRfQ29ubmVjdGlvblN0cmluZwBUb1N0cmlu
ZwBTdWJzdHJpbmcAZ2V0X0xlbmd0aABTVF9jMjk4ZDQ3NDllOGI0MTE0YmE3NDRkYTg4NTE0ZmM0
Yy5jc3Byb2oATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sATmV0d29ya0NyZWRlbnRpYWwAU2NyaXB0T2JqZWN0TW9k
ZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFN5c3RlbS5OZXQuTWFpbABzZW5kTWFpbABTVF9jMjk4
ZDQ3NDllOGI0MTE0YmE3NDRkYTg4NTE0ZmM0Yy5jc3Byb2ouZGxsAEZpbGwAR2V0UmVzcG9uc2VT
dHJlYW0AZ2V0X0VuZE9mU3RyZWFtAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9w
ZW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBEYXRhVGFibGVDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNl
dF9Db25uZWN0aW9uAERiQ29ubmVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9u
AFdlYkV4Y2VwdGlvbgBnZXRfSW5uZXJFeGNlcHRpb24AZ2V0X1N0YXR1c0Rlc2NyaXB0aW9uAFN5
c3RlbS5EYXRhLkNvbW1vbgBGaWVsZEluZm8ARmlsZUluZm8AQ3VsdHVyZUluZm8ARGlyZWN0b3J5
SW5mbwBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rp
b25NYW5hZ2VyAFNxbERhdGFBZGFwdGVyAExvZ1NjcmlwdEVycm9yAF9lcnJvcgBJRW51bWVyYXRv
cgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1
bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2MyOThkNDc0OWU4YjQx
MTRiYTc0NGRhODg1MTRmYzRjLmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMA
RGVidWdnaW5nTW9kZXMAU1RfYzI5OGQ0NzQ5ZThiNDExNGJhNzQ0ZGE4ODUxNGZjNGMuY3Nwcm9q
LlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBnZXRfVmFyaWFibGVzAERlbGV0ZUZUUEZpbGVzAEdldEZp
bGVzAEJpbmRpbmdGbGFncwBTZXR0aW5ncwBJQ3JlZGVudGlhbHMAc2V0X0NyZWRlbnRpYWxzAHNl
dF9Vc2VEZWZhdWx0Q3JlZGVudGlhbHMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9u
cwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AHNl
dF9TdWJqZWN0AFN5c3RlbS5OZXQARGF0YVNldABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABT
eXN0ZW0uRGF0YS5TcWxDbGllbnQAU210cENsaWVudABnZXRfQ3VycmVudABzZXRfUG9ydABGdHBX
ZWJSZXF1ZXN0AENoZWNrRmlsZUV4aXN0AHNldF9Ib3N0AHNldF9UaW1lb3V0AHNldF9SZWFkV3Jp
dGVUaW1lb3V0AE1vdmVOZXh0AGdldF9Ob3cARGF0YVJvdwBBcnJheQBMb2NhdGVBZ2VuY3kAYWdl
bmN5AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBzZXRfVXNlQmluYXJ5AEV4ZWN1dGVOb25RdWVyeQBv
cF9FcXVhbGl0eQAAAAAAMUEARABPAC4ATgBFAFQAQwBvAG4AbgBlAGMAdABpAG8AbgBNAGEAbgBh
AGcAZQByAACCZ1MARQBMAEUAQwBUACAAQQBnAGUAbgBjAHkATgBhAG0AZQAsACAAQwBvAG4AbgBl
AGMAdABpAG8AbgBUAHkAcABlACwAIABTAGUAcgB2AGUAcgBOAGEAbQBlACwAIABTAGUAcgB2AGUA
cgBVAHMAZQByAE4AYQBtAGUALAAgAFMAZQByAHYAZQByAFAAYQBzAHMAdwBvAHIAZAAsACAAUwBl
AHIAdgBlAHIAUABvAHIAdAAsACAATABvAGMAYQBsAFAAYQB0AGgALAAgAFIAZQBtAG8AdABlAFAA
YQB0AGgAIAAgAEYAUgBPAE0AIABUAHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBfAEEAZwBl
AG4AYwB5AFYAZQBuAGQAbwByAEkAbgBmAG8AIAB3AGkAdABoACAAKABuAG8AbABvAGMAawApACAA
VwBIAEUAUgBFACAAQwBvAG4AbgBlAGMAdABpAG8AbgBUAHkAcABlACAAPQAgACcARgBUAFAAJwAg
AEEATgBEACAAQQBjAHQAaQB2AGUAIAA9ACAAMQAgAEEATgBEACAAQQBnAGUAbgBjAHkATgBhAG0A
ZQAgAEkATgAoACcARgBIAFAAJwAsACAAJwBPAGMAbwBlAGUAJwAsACAAJwBBAHAAbwBwAGsAYQAt
AFIAZQBkAEwAaQBnAGgAdAAnACwAIAAnAE8AYwBvAGUAZQAtAFIAZQBkAEwAaQBnAGgAdAAnACwA
IAAnAE8AcgBsAGEAbgBkAG8ALQBSAGUAZABMAGkAZwBoAHQAJwAsACAAJwBDAEYAWAAnACkAAUFU
AHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBfAEEAZwBlAG4AYwB5AFYAZQBuAGQAbwByAEkA
bgBmAG8AABVBAGcAZQBuAGMAeQBOAGEAbQBlAAAHIAA6ACAAAAMnAAEBAICVIABFAHIAcgBvAHIA
IABhAHQAIABGAFQAUAAgAFMAaQBkAGUAIAAtACAARABlAGwAZQB0AGUAIABaAGkAcAAgAEYAaQBs
AGUAcwAgAFMAYwByAGkAcAB0ACAAVABhAHMAawAgAGEAdAAgAEwAbwBjAGEAdABlAEEAZwBlAG4A
YwB5ACAARgB1AG4AYwB0AGkAbwBuAAGBdVMARQBMAEUAQwBUACAAQQBnAGUAbgBjAHkATgBhAG0A
ZQAsACAAQwBvAG4AbgBlAGMAdABpAG8AbgBUAHkAcABlACwAIABTAGUAcgB2AGUAcgBOAGEAbQBl
ACwAIABTAGUAcgB2AGUAcgBVAHMAZQByAE4AYQBtAGUALAAgAFMAZQByAHYAZQByAFAAYQBzAHMA
dwBvAHIAZAAsACAAUwBlAHIAdgBlAHIAUABvAHIAdAAsACAATABvAGMAYQBsAFAAYQB0AGgALAAg
AFIAZQBtAG8AdABlAFAAYQB0AGgAIAAgAEYAUgBPAE0AIABUAHIAYQBmAGYAaQBjAEMAaQB0AGEA
dABpAG8AbgBfAEEAZwBlAG4AYwB5AFYAZQBuAGQAbwByAEkAbgBmAG8AIAB3AGkAdABoACAAKABu
AG8AbABvAGMAawApACAAVwBIAEUAUgBFACAAQQBnAGUAbgBjAHkATgBhAG0AZQAgAD0AIAAnAAEV
UgBlAG0AbwB0AGUAUABhAHQAaAAADWYAdABwADoALwAvAAAVUwBlAHIAdgBlAHIATgBhAG0AZQAA
HVMAZQByAHYAZQByAFUAcwBlAHIATgBhAG0AZQAAHVMAZQByAHYAZQByAFAAYQBzAHMAdwBvAHIA
ZAAACU4ATABTAFQAAICXIABFAHIAcgBvAHIAIABhAHQAIABGAFQAUAAgAFMAaQBkAGUAIAAtACAA
RABlAGwAZQB0AGUAIABaAGkAcAAgAEYAaQBsAGUAcwAgAFMAYwByAGkAcAB0ACAAVABhAHMAawAg
AGEAdAAgAEwAbwBjAGEAdABlAFoAaQBwAEYAaQBsAGUAIABGAHUAbgBjAHQAaQBvAG4AAQlTAEkA
WgBFAAAJRABFAEwARQAAgJkgAEUAcgByAG8AcgAgAGEAdAAgAEYAVABQACAAUwBpAGQAZQAgAC0A
IABEAGUAbABlAHQAZQAgAFoAaQBwACAARgBpAGwAZQBzACAAUwBjAHIAaQBwAHQAIABUAGEAcwBr
ACAAYQB0ACAARABlAGwAZQB0AGUARgBUAFAARgBpAGwAZQBzACAARgB1AG4AYwB0AGkAbwBuAAEZ
bQBfAE0AZQB0AGgAbwBkAEkAbgBmAG8AAB9LAG4AbwB3AG4ATQBlAHQAaABvAGQASQBuAGYAbwAA
C0YAbABhAGcAcwAAgJFJAG4AcwBlAHIAdAAgAGkAbgB0AG8AIABkAGIAbwAuAFQAcgBhAGYAZgBp
AGMAQwBpAHQAYQB0AGkAbwBuAF8ASQBtAHAAbwByAHQAXwBFAHIAcgBvAHIATABvAGcAIAAoAEUA
cgByAG8AcgBNAGUAcwBzAGEAZwBlACkAIAB2AGEAbAB1AGUAcwAgACgAJwABBScAKQABI1UAcwBl
AHIAOgA6AFYAYQByAEMAbwBuAG4AVAB5AHAAZQAAB0YAVABQAAAlVQBzAGUAcgA6ADoAVgBhAHIA
TABvAGMAYQBsAFAAYQB0AGgAAANcAAALKgAuAHoAaQBwAABPVAByAGEAZgBmAGkAQwBpAHQAYQB0
AGkAbwBuAF8ASQBtAHAAbwByAHQAQABtAHkAbwByAGEAbgBnAGUAYwBsAGUAcgBrAC4AYwBvAG0A
AH9UAGEAcgBpAGcALgBNAHUAZABhAHcAaQBAAG0AeQBvAHIAYQBuAGcAZQBjAGwAZQByAGsALgBj
AG8AbQAsACAAQQBuAHQAaABvAG4AeQAuAFAAYQB5AG4AZQBAAE0AeQBvAHIAYQBuAGcAZQBjAGwA
ZQByAGsALgBjAG8AbQAAN20AYQBpAGwAcgBlAGwAYQB5AC4ATQBZAE8AUgBBAE4ARwBFAEMATABF
AFIASwAuAE4ARQBUAAAtTgBvACAAZgBpAGwAZQAgAEEAdgBhAGkAbABhAGIAbABlACAAZgBvAHIA
IAAAL04AbwAgAGYAaQBsAGUAIAByAGUAYwBlAGkAdgBlAGQAIAB0AG8AZABhAHkAIAAAEU0ALwBk
AC8AeQB5AHkAeQAACyAAZgBvAHIAIAAAf1MAVABfAGMAMgA5ADgAZAA0ADcANAA5AGUAOABiADQA
MQAxADQAYgBhADcANAA0AGQAYQA4ADgANQAxADQAZgBjADQAYwAuAGMAcwBwAHIAbwBqAC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAABg0mdA1sX9RZr1V6f/bil8
AAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAlQUgABKApRAHCBI9DhJBEkUSSRJNElEOBSAAEoCp
BiABEoCtHAQgARwcBQAAEYCBBiACAQ4SPQUgAQgSRQUgABKAtQYgARKAuQ4GIAESgLkIBSAAEoC9
BCAAEkkDIAAcBCABHA4DIAAOAyAAAgQgABJRBgADDg4ODgUgAg4ODgUAAg4ODiMHEBUSVQEOEj0O
Dg4SQRJFEkkSWRJdEmEVEWUBDg4STRJRDgUVElUBDgYAARKAzQ4FIAIBDg4GIAEBEoDZBCABAQIF
IAASgN0FIAASgOEGIAEBEoDhBSABARMACCAAFRFlARMABRURZQEOBCAAEwATBwoSPRJBDg4OEkUS
SRJZEl0STQcABA4ODg4OBSAAEYDpFwcNEj0SQQ4ODhJFEkkSWRJNEmkOElEOBSAAEYDtDQcHEm0S
cQgSSRwIEk0IAAESgPERgPUIIAIScQ4RgPkFIAASgPEFIAIBHBwGBwISeRI9BSABARI9AyAACAUH
Aw4OCAUgABKBBQYgARKBCRwFAAICDg4EIAEIDgUgAg4ICAcgAR0SgREOBwcCEn0RgIEGIAEBEYEZ
BCABDg4FIAEBEn0FIAASgR0HIAIBDhKBHQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAEBhKA
jQQGEoCRAwYSEAIGCAMGERQDAAABBQAAEoCNBQAAEoCRBgABARKAkQQAABIQBQgAEoCNBQgAEoCR
BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAALwEA
KlNUX2MyOThkNDc0OWU4YjQxMTRiYTc0NGRhODg1MTRmYzRjLmNzcHJvagAABQEAAAAAFgEAEUNv
cHlyaWdodCBAICAyMDE0AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1l
d29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAqEwAAAAAAAAA
AAAAwkwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALRMAAAAAAAAAAAAAAAAX0NvckRsbE1haW4A
bXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAFoEAAAA
AAAAAAAAAFoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQBCQW8fAAABAEJBbx8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAS6AwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAACWAwAAAQAwADAAMAAwADAANABiADAAAAAa
AAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAA
AAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGMAMgA5
ADgAZAA0ADcANAA5AGUAOABiADQAMQAxADQAYgBhADcANAA0AGQAYQA4ADgANQAxADQAZgBjADQA
YwAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4AOAAwADQANwAuADEANgA3ADAANgAAAAAAfgAvAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUA
AABTAFQAXwBjADIAOQA4AGQANAA3ADQAOQBlADgAYgA0ADEAMQA0AGIAYQA3ADQANABkAGEAOAA4
ADUAMQA0AGYAYwA0AGMALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABIABIAAQBMAGUAZwBhAGwA
QwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADQAAAAq
AAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAIYALwABAE8AcgBpAGcA
aQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBjADIAOQA4AGQANAA3ADQAOQBlADgAYgA0
ADEAMQA0AGIAYQA3ADQANABkAGEAOAA4ADUAMQA0AGYAYwA0AGMALgBjAHMAcAByAG8AagAuAGQA
bABsAAAAAAB2ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGMAMgA5ADgAZAA0
ADcANAA5AGUAOABiADQAMQAxADQAYgBhADcANAA0AGQAYQA4ADgANQAxADQAZgBjADQAYwAuAGMA
cwBwAHIAbwBqAAAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgAMAA0ADcALgAxADYANwAwADYAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADgAMAA0ADcALgAxADYANwAwADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADUPAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{A3E26DAE-7858-49D8-847D-3DD93494FDE3}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Script Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{FB988D6E-38DE-4100-860A-605CD53DA764}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{8C849A35-D6E3-4799-A524-B1C8A30131AB}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:DTSID="{48986E01-B4A2-4086-A915-A290AC246A6A}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="User"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">0</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_92ee9e7e5be248af84d0db265f45b0ae"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::VarAgencyName,User::VarCommandText,User::VarConnType,User::VarDataFile,User::VarLocalPath,User::VarQueryResult,User::VarRemotePath,User::VarServerName,User::VarServerPassword,User::VarServerPort,User::VarServerUserName,User::VarSSHKey,User::VarVendorAgencyID,User::VarZipFile">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="st_92ee9e7e5be248af84d0db265f45b0ae.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_92ee9e7e5be248af84d0db265f45b0ae.csproj</RootNamespace>
    <AssemblyName>ST_92ee9e7e5be248af84d0db265f45b0ae.csproj</AssemblyName>
    <ProjectGuid>{7B30CCA1-B7A9-4510-B517-38259F5E9191}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            ConnectionManager ftpConnectionManager;
            ftpConnectionManager = Dts.Connections["FTPConnManager"];
            Dts.Connections["FTPConnManager"].Properties["ServerName"].SetValue(ftpConnectionManager, Dts.Variables["VarServerName"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerPort"].SetValue(ftpConnectionManager, Dts.Variables["VarServerPort"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerUserName"].SetValue(ftpConnectionManager, Dts.Variables["VarServerUserName"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerPassword"].SetValue(ftpConnectionManager, Dts.Variables["VarServerPassword"].Value);
            Dts.TaskResult = (int)ScriptResults.Success;

        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_92ee9e7e5be248af84d0db265f45b0ae</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_92ee9e7e5be248af84d0db265f45b0ae</msb:DisplayName>
    <msb:ProjectId>{EC655160-7BE2-48B8-ACE1-CDB783667B7E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_92ee9e7e5be248af84d0db265f45b0ae.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Settings.get_Default():ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Sett" +
    "ings")]

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.dll">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
+QBlAFAA+QCpBVgAmQBFBF4AuQBFBAYACAAUAHgACAAYAH0AKQBzAOUALgALAL0ALgATAMYALgAb
AOUALgAjAO4ALgArAB4BLgAzAB4BLgA7AB4BLgBDAO4ALgBLACQBLgBTAB4BLgBbADsBQwBjAH0A
SQBzAOUAYQB7AH0AYwBrAH0AGwADAAEABAADAAAAIwSuAAAAxACzAAAAkgW4AAIABAADAAIABQAF
AAEABgAFAAIABwAHAASAAAABAAAAbx81SAAAAAAAAOECAAAEAAAAAAAAAAAAAABmADEAAAAAAA8A
AAAAAAAAAAAAAG8ADAMAAAAADwAAAAAAAAAAAAAAbwAKAAAAAAAEAAAAAAAAAAAAAABmALQDAAAA
AAAAAAABAAAAlgQAAAUAAgAAAAA8TW9kdWxlPgBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWRE
VFMAdmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFyaWFibGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBU
eXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFS
VFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRU
YXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAFNldFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50
aW1lLlZlcnNpb25pbmcAU1RfOTJlZTllN2U1YmUyNDhhZjg0ZDBkYjI2NWY0NWIwYWUuY3Nwcm9q
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5U
YXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABT
VF85MmVlOWU3ZTViZTI0OGFmODRkMGRiMjY1ZjQ1YjBhZS5jc3Byb2ouZGxsAGdldF9JdGVtAFN5
c3RlbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291
cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0
aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF85
MmVlOWU3ZTViZTI0OGFmODRkMGRiMjY1ZjQ1YjBhZS5jc3Byb2ouUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzkyZWU5ZTdlNWJlMjQ4YWY4NGQwZGIyNjVm
NDViMGFlLmNzcHJvai5Qcm9wZXJ0aWVzAGdldF9Qcm9wZXJ0aWVzAER0c1Byb3BlcnRpZXMAZ2V0
X1ZhcmlhYmxlcwBTZXR0aW5ncwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlw
dFJlc3VsdHMAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AGdldF9Bc3NlbWJseQBE
dHNQcm9wZXJ0eQAAAAAdRgBUAFAAQwBvAG4AbgBNAGEAbgBhAGcAZQByAAAVUwBlAHIAdgBlAHIA
TgBhAG0AZQAAG1YAYQByAFMAZQByAHYAZQByAE4AYQBtAGUAABVTAGUAcgB2AGUAcgBQAG8AcgB0
AAAbVgBhAHIAUwBlAHIAdgBlAHIAUABvAHIAdAAAHVMAZQByAHYAZQByAFUAcwBlAHIATgBhAG0A
ZQAAI1YAYQByAFMAZQByAHYAZQByAFUAcwBlAHIATgBhAG0AZQAAHVMAZQByAHYAZQByAFAAYQBz
AHMAdwBvAHIAZAAAI1YAYQByAFMAZQByAHYAZQByAFAAYQBzAHMAdwBvAHIAZAAAf1MAVABfADkA
MgBlAGUAOQBlADcAZQA1AGIAZQAyADQAOABhAGYAOAA0AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAw
AGEAZQAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMA
ZQBzAAAAk3GndX00HE2ap17hDmp6IAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERVQQHARI9BCAA
EmUEIAASaQUgARI9HAQgABJtBSABEnEcBCAAEnUFIAESeRwDIAAcBSACARwcBwABEn0RgIEFIAAS
gIUHIAIBDhKAhQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJNAwYSUQMGEhACBggDBhEU
BAAAEk0EAAASUQUAAQESUQQAABIQAwAAAQQIABJNBAgAElEECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAvAQAqU1RfOTJlZTllN2U1YmUyNDhhZjg0
ZDBkYjI2NWY0NWIwYWUuY3Nwcm9qAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTUAAEkBABou
TkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBG
cmFtZXdvcmsgNC43AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAABQwAAAAAAAAAAAAAC4wAAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAgMAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAWgQAAAAAAAAAAAAAWgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABADVIbx8AAAEANUhvHz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBLoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAJYDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAAB+ACsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AOQAyAGUAZQA5AGUANwBlADUAYgBlADIANAA4AGEAZgA4ADQAZAAwAGQAYgAyADYA
NQBmADQANQBiADAAYQBlAC4AYwBzAHAAcgBvAGoAAAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBp
AG8AbgAAAAAAMQAuADAALgA4ADAANAA3AC4AMQA4ADQAOAA1AAAAAAB+AC8AAQBJAG4AdABlAHIA
bgBhAGwATgBhAG0AZQAAAFMAVABfADkAMgBlAGUAOQBlADcAZQA1AGIAZQAyADQAOABhAGYAOAA0
AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAwAGEAZQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAEgA
EgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAg
ACAAMgAwADEANQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
hgAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAMgBlAGUAOQBl
ADcAZQA1AGIAZQAyADQAOABhAGYAOAA0AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAwAGEAZQAuAGMA
cwBwAHIAbwBqAC4AZABsAGwAAAAAAHYAKwABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AOQAyAGUAZQA5AGUANwBlADUAYgBlADIANAA4AGEAZgA4ADQAZAAwAGQAYgAyADYANQBmADQA
NQBiADAAYQBlAC4AYwBzAHAAcgBvAGoAAAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOAAwADQANwAuADEAOAA0ADgANQAAAAAARgAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAwADQANwAuADEAOAA0ADgANQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEAwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\SFTP Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{918A2EFD-E6CA-4CB1-B0BD-2AFD6F46A9A9}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="SFTP Task"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\SFTP Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{3F84B093-D13E-459B-ACF6-114F6804BA20}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{5DB2B025-90E3-45A9-9694-5D8DD6651504}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:DTSID="{25142B13-6DA6-4482-A98F-834F75169CE9}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="User"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">0</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8dee0adf973142fba443d8a34400791c"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::VarAgencyName,User::VarConnType,User::VarLocalPath,User::VarRemotePath,User::VarServerName,User::VarServerPassword,User::VarServerPort,User::VarServerUserName,User::VarZipFile">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_8dee0adf973142fba443d8a34400791c.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_8dee0adf973142fba443d8a34400791c.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Net.Mail;


namespace ST_8dee0adf973142fba443d8a34400791c.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public void Main()
        {
            // Calling the method to connect to SFTP Server
            ConnectToSFTPServer();

            // Checking if any file missing from an Agency
            CheckZipFileReceived();

            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void ConnectToSFTPServer()
        {
            try {

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName = null, ConnectionType = null, ServerName = null, UserName = null, Password = null, LocalPath = null, RemotePath = null;
                int Port = 0;

                string fileName = "";
                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'SFTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    Dts.Variables["User::VarAgencyName"].Value = "";

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        ConnectionType = row["ConnectionType"].ToString();
                        ServerName = row["ServerName"].ToString();
                        UserName = row["ServerUserName"].ToString();
                        Password = row["ServerPassword"].ToString();
                        Port = Convert.ToInt32(row["ServerPort"].ToString());
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();


                        using (Renci.SshNet.SftpClient SFTPConn = new Renci.SshNet.SftpClient(ServerName, Port, UserName, Password))
                        {
                            SFTPConn.BufferSize = 1024 * 32 - 52;
                            SFTPConn.Connect();

                            // Setting timeout value for SFTP server to 10 minutes T.M. 3/15/2016
                            SFTPConn.ConnectionInfo.Timeout = TimeSpan.FromSeconds(600);

                            foreach (SftpFile File in SFTPConn.ListDirectory(RemotePath, null))
                            {
                                fileName = (string)File.Name;
                                if (fileName.EndsWith("zip"))
                                {
                                    SftpDownloadFile(fileName, LocalPath, RemotePath, SFTPConn);
                                    Dts.Variables["User::VarZipFile"].Value = fileName;
                                }
                                else
                                {
                                    Dts.Variables["User::VarZipFile"].Value = "";
                                }
                                DeleteDownloadedFile(fileName, SFTPConn);
                            }
                            // disconnect SFTPConn object T.M. 3/8/2016
                            SFTPConn.Disconnect();
                            SFTPConn.Dispose();
                        }


                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + "  Error at SFTP Task (Tracs) at ConnectToSFTPServer Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {
                
            }
           
        }

        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }

        public void SftpDownloadFile(string fileName, string UNCPath, string RemotePath, Renci.SshNet.SftpClient SFTPConn)
        {
            System.IO.Stream fout = null;
            string CurrentLocalPath = UNCPath + "\\" + fileName;
            string CurrentRemotePath = RemotePath + fileName;

            fout = new System.IO.FileStream(CurrentLocalPath, FileMode.Create);
            SFTPConn.DownloadFile(CurrentRemotePath, fout, null);
            fout.Close();
        }

        public void DeleteDownloadedFile(string downLoadedFile , SftpClient SFTPConn )
        {
            try {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName = null, ConnectionType = null, ServerName = null, UserName = null, Password = null, LocalPath = null, RemotePath = null;
                int Port = 0;

                string fileName = "";
                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'SFTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        ConnectionType = row["ConnectionType"].ToString();
                        ServerName = row["ServerName"].ToString();
                        UserName = row["ServerUserName"].ToString();
                        Password = row["ServerPassword"].ToString();
                        Port = Convert.ToInt32(row["ServerPort"].ToString());
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);

                        foreach (string FileNameWithPath in AllFiles)
                        {
                            fileName = Path.GetFileName(FileNameWithPath);
                            if (downLoadedFile == fileName)
                            {
                                SFTPConn.Delete(RemotePath + fileName);
                            }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + "  Error at SFTP Task (Tracs) at DeleteDownloadedFile Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        void CheckZipFileReceived()
        {
            try {
                if (Dts.Variables["User::VarConnType"].Value.ToString() == "SFTP")
                {
                    string agency = null;
                    string path = Dts.Variables["User::VarLocalPath"].Value.ToString();
                    int pos = path.LastIndexOf("\\") + 1;
                    agency = path.Substring(pos, path.Length - pos);
                    DirectoryInfo di = new DirectoryInfo(Dts.Variables["User::VarLocalPath"].Value.ToString());
                    FileInfo[] ZipFiles = di.GetFiles("*.zip");
                    if (ZipFiles.Length == 0)
                    {
                        sendMail(agency);
                    }
                }
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at SFTP Task (Tracs) at CheckZipFileReceived Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        void sendMail(string agencyName)
        {
            MailMessage mail = new MailMessage("TraffiCitation_Import@myorangeclerk.com", "Tarig.Mudawi@myorangeclerk.com, Anthony.Payne@Myorangeclerk.com");
            SmtpClient client = new SmtpClient();
            client.Port = 25;
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            client.UseDefaultCredentials = false;
            client.Host = "mailrelay.MYORANGECLERK.NET";
            mail.Subject = "No file Available for " + agencyName;
            mail.Body = "No file received today " + DateTime.Now.ToString("M/d/yyyy") + " for " + agencyName;
            client.Send(mail);
        }

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_8dee0adf973142fba443d8a34400791c</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_8dee0adf973142fba443d8a34400791c</msb:DisplayName>
    <msb:ProjectId>{33AD5C8B-FB19-4C2B-97D0-0B294BF8372B}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_8dee0adf973142fba443d8a34400791c.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Settings.get_Default():ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Sett" +
    "ings")]

namespace ST_8dee0adf973142fba443d8a34400791c.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="st_8dee0adf973142fba443d8a34400791c.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_8dee0adf973142fba443d8a34400791c.csproj</RootNamespace>
    <AssemblyName>ST_8dee0adf973142fba443d8a34400791c.csproj</AssemblyName>
    <ProjectGuid>{5644D83D-73DF-4563-B761-01E32E3FD6D9}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Renci.SshNet, Version=2014.4.6.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\tmudawi\Documents\Renci\2016\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_8dee0adf973142fba443d8a34400791c.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FAA7F1F1-A9ED-4844-99AD-966EC24EBCB2}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="Shared Folder File Transfer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{BAACE7AF-8584-4F90-AFB6-F764283322A0}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{1F0DAE70-0455-484A-A781-EB73E25B354D}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer.EventHandlers[OnTaskFailed]"
              DTS:CreationName="OnTaskFailed"
              DTS:DTSID="{57B40A2C-CA40-4A8D-B300-F147ECB9113B}"
              DTS:EventID="0"
              DTS:EventName="OnTaskFailed"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{559E49B3-2762-40F4-AA6E-08F6010EC6CB}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_b10f542c26f241a595df7be1a7d65adb"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Reflection;

namespace ST_c298d4749e8b4114ba744da88514fc4c.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
        public void Main()
        {
            // Locate the Agency
            LocateAgency();

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        void LocateAgency()
        {
            // Added try catch to this function T.M. 10/9/2017
            try
            {

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string agencyName = null;
                string serverName = null;
                string serverUserName = null;
                string serverPassword = null;
                string serverPort = null;
                string localPath = null;
                string remotePath = null;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'FTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        agencyName = row["AgencyName"].ToString();
                        serverName = row["ServerName"].ToString();
                        serverUserName = row["ServerUserName"].ToString();
                        serverPassword = row["ServerPassword"].ToString();
                        serverPort = row["ServerPort"].ToString();
                        localPath = row["LocalPath"].ToString();
                        remotePath = row["RemotePath"].ToString();

                        CopyFiles(agencyName, serverName, serverUserName, serverPassword, serverPort, localPath, remotePath);
                    }
                }

                conn.Close();
            }
            catch (Exception ex)
            {

                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Customized FTP Script Task at LocateAgency Function");

            }
        }

        void CopyFiles(string agencyName, string serverName, string serverUserName, string serverPassword, string serverPort, string localPath, string remotePath)
        {

            try
            {
                string fileName = null;
                string sourcePath = remotePath;
                string targetPath = localPath;
                string sourceFile = null;
                string destFile = null;

                string[] fileEntries = Directory.GetFiles(sourcePath);

                foreach (var file in fileEntries)
                {
                    fileName = (file.ToString()).Substring(sourcePath.Length);

                    sourceFile = System.IO.Path.Combine(sourcePath, fileName);
                    destFile = System.IO.Path.Combine(targetPath, fileName);

                    System.IO.File.Copy(sourceFile, destFile, true);
                }
            }
            catch (Exception ex)
            {
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Customized FTP Script Task at LocateZipFile Function");
            }
        }


        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }
    }
}

    ]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_b10f542c26f241a595df7be1a7d65adb</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_b10f542c26f241a595df7be1a7d65adb</msb:DisplayName>
    <msb:ProjectId>{8BD6B3A1-59D4-48A6-AF02-7C14CD11560A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_b10f542c26f241a595df7be1a7d65adb.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="1f90cf2663a8410784e5d52a797c791e">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>100</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Settings.get_Default():ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Sett" +
    "ings")]

namespace ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="st_b10f542c26f241a595df7be1a7d65adb.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_b10f542c26f241a595df7be1a7d65adb.csproj</RootNamespace>
    <AssemblyName>ST_b10f542c26f241a595df7be1a7d65adb.csproj</AssemblyName>
    <ProjectGuid>{22946012-495D-4807-B018-927A28E1DD83}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b10f542c26f241a595df7be1a7d65adb.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b10f542c26f241a595df7be1a7d65adb.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b10f542c26f241a595df7be1a7d65adb.csproj.dll">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
agMKAAsDQQQKAFkBQQQOAIcFrgcOAO0FrgcOAIsHOwAGABIGMwcGAKIAzwQGAJ4FzwQOAFoArgcG
ANYEzwQGAOYBOQYGAIQHzwQGAMsFbAYGALsFDAUSALYBfAQSABcCfAQSAJAB9wQGAMsBTAYKAGoE
QQQWAEoH/AAWANsF/AAOAPAFqAUOADMFOwAOAJgAOwAOAEcFOwAOAHUBOwAOAOQHOwAOAGgFqAUG
AJsDzwQGABsICgAGALwDCgAGANIACgAOAFAAqAUGACQBzwQGAK4AzwQGAP0HIQUAAAAAAQAAAAAA
AQABAAEAEADsBPcDOQABAAEAAAAQAHMG1gZhAAEABgAAARAAKgfWBnUAAwAKAAMBAABmBwAAWQAE
AA0AEQDbBAEBEQBJAQUBEQB8AAkBBgYzAA0BVoBWBxABVoApARABUCAAAAAAhgDyBAYAAQBkIAAA
AACBAOwHBgABAGQiAAAAAIEAIAcUAQEALCMAAAAAhgD8BRAACACgIwAAAACGGCwGBgAJAKgjAAAA
AIMYLAYGAAkAsCMAAAAAkwjHBR8BCQDcIwAAAACTCDEBJAEJAOMjAAAAAJMIPQEpAQkA6yMAAAAA
lgiTBy8BCgDyIwAAAACGGCwGBgAKAPojAAAAAJEYMgY0AQoAAAABAPEAAAACAOYAAAADANcAAAAE
AGUAAAAFANAHAAAGALcDAAAHAKwDAAABAAsGAAABAGQDCQAsBgEAEQAsBgYAGQAsBgoAKQAsBhAA
MQAsBhAAOQAsBhAAQQAsBhAASQAsBhAAUQAsBhAAWQAsBhAAYQAsBhAAaQAsBgYAuQAsBgYA4QAs
BhUA8QAsBgYAcQBeBxsA+QCfBwEA+QBGBzcAAQHGBD0ACQF1BUQAgQAsBkkAiQAsBgYAEQHBBFAA
iQAMB1YAGQHGBFwAGQHGBGMAIQF0B2oAMQEeBnAAkQDEB3UAOQHGBHkAwQCZA34AkQDbB4IAmQCu
AQYAQQGoAQYAoQCMAH4AoQCVBYYASQF9B4sASQF0AJIASQF9B5gAUQEXB6sASQHBA7EASQGiA7UA
WQEcAZgAYQEGCLoAqQAsBhAACQGEA34AeQAsBhAAqQBZBcgAQQHnBAYAaQELCLEAcQAsBgYAwQAs
BgYAcQHAAM4AcQH5B9cAyQAsBt0A6QAsBgYACAAUAPcACAAYAPwAKQBzAG8BLgALAEcBLgATAFAB
LgAbAG8BLgAjAHgBLgArAKgBLgAzAKgBLgA7AKgBLgBDAHgBLgBLAK4BLgBTAKgBLgBbAMUBQwBj
APwASQBzAG8BYQB7APwAYwBrAPwAIACeAMEAAwABAAQAAwAAAMsFOAEAAFEBPQEAAJcHQgECAAcA
AwACAAgABQABAAkABQACAAoABwAEgAAAAQAAAHAf2FoAAAAAAADMAwAABAAAAAAAAAAAAAAA5QBH
AAAAAAAPAAAAAAAAAAAAAADuACIEAAAAAAQAAAAAAAAAAAAAAOUAOwAAAAAABAAAAAAAAAAAAAAA
5QDPBAAAAAAPAAAAAAAAAAAAAADuABQAAAAAAAAAAAABAAAAfQYAAAUAAgAAAAAAADxNb2R1bGU+
AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0u
RGF0YQBtc2NvcmxpYgBEYkNvbW1hbmQAU3FsQ29tbWFuZABzZXJ2ZXJQYXNzd29yZABSZXBsYWNl
AGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBEYXRhVGFibGUASURpc3Bvc2FibGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBzZXJ2ZXJVc2VyTmFtZQBzZXJ2ZXJO
YW1lAGFnZW5jeU5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBDb21iaW5lAFR5
cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJU
U2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0
aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGls
ZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dh
YmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmli
dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBB
c3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0
ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0
ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcA
VG9TdHJpbmcAU3Vic3RyaW5nAHJlbW90ZVBhdGgAbG9jYWxQYXRoAGdldF9MZW5ndGgAU1RfYjEw
ZjU0MmMyNmYyNDFhNTk1ZGY3YmUxYTdkNjVhZGIuY3Nwcm9qAFNUX2MyOThkNDc0OWU4YjQxMTRi
YTc0NGRhODg1MTRmYzRjLmNzcHJvagBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfYjEwZjU0MmMyNmYyNDFhNTk1ZGY3YmUxYTdkNjVhZGIu
Y3Nwcm9qLmRsbABGaWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2Ny
aXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0u
UmVmbGVjdGlvbgBEYXRhVGFibGVDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25u
ZWN0aW9uAERiQ29ubmVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAGdldF9J
bm5lckV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNl
TWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBTcWxEYXRhQWRhcHRlcgBMb2dTY3JpcHRFcnJvcgBf
ZXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdu
b3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBT
VF9iMTBmNTQyYzI2ZjI0MWE1OTVkZjdiZTFhN2Q2NWFkYi5jc3Byb2ouUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2IxMGY1NDJjMjZmMjQxYTU5NWRmN2Jl
MWE3ZDY1YWRiLmNzcHJvai5Qcm9wZXJ0aWVzAGdldF9UYWJsZXMAR2V0RmlsZXMAQ29weUZpbGVz
AFNldHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRf
RHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABEYXRhU2V0AGdldF9EZWZh
dWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABzZXJ2
ZXJQb3J0AE1vdmVOZXh0AERhdGFSb3cATG9jYXRlQWdlbmN5AGdldF9Bc3NlbWJseQBDb3B5AEV4
ZWN1dGVOb25RdWVyeQBEaXJlY3RvcnkAAAAAADFBAEQATwAuAE4ARQBUAEMAbwBuAG4AZQBjAHQA
aQBvAG4ATQBhAG4AYQBnAGUAcgAAgaNTAEUATABFAEMAVAAgAEEAZwBlAG4AYwB5AE4AYQBtAGUA
LAAgAEMAbwBuAG4AZQBjAHQAaQBvAG4AVAB5AHAAZQAsACAAUwBlAHIAdgBlAHIATgBhAG0AZQAs
ACAAUwBlAHIAdgBlAHIAVQBzAGUAcgBOAGEAbQBlACwAIABTAGUAcgB2AGUAcgBQAGEAcwBzAHcA
bwByAGQALAAgAFMAZQByAHYAZQByAFAAbwByAHQALAAgAEwAbwBjAGEAbABQAGEAdABoACwAIABS
AGUAbQBvAHQAZQBQAGEAdABoACAAIABGAFIATwBNACAAVAByAGEAZgBmAGkAYwBDAGkAdABhAHQA
aQBvAG4AXwBBAGcAZQBuAGMAeQBWAGUAbgBkAG8AcgBJAG4AZgBvACAAdwBpAHQAaAAgACgAbgBv
AGwAbwBjAGsAKQAgAFcASABFAFIARQAgAEMAbwBuAG4AZQBjAHQAaQBvAG4AVAB5AHAAZQAgAD0A
IAAnAEYAVABQACcAIABBAE4ARAAgAEEAYwB0AGkAdgBlACAAPQAgADEAAUFUAHIAYQBmAGYAaQBj
AEMAaQB0AGEAdABpAG8AbgBfAEEAZwBlAG4AYwB5AFYAZQBuAGQAbwByAEkAbgBmAG8AABVBAGcA
ZQBuAGMAeQBOAGEAbQBlAAAVUwBlAHIAdgBlAHIATgBhAG0AZQAAHVMAZQByAHYAZQByAFUAcwBl
AHIATgBhAG0AZQAAHVMAZQByAHYAZQByAFAAYQBzAHMAdwBvAHIAZAAAFVMAZQByAHYAZQByAFAA
bwByAHQAABNMAG8AYwBhAGwAUABhAHQAaAAAFVIAZQBtAG8AdABlAFAAYQB0AGgAAAcgADoAIAAA
AycAAQEAeyAARQByAHIAbwByACAAYQB0ACAAQwB1AHMAdABvAG0AaQB6AGUAZAAgAEYAVABQACAA
UwBjAHIAaQBwAHQAIABUAGEAcwBrACAAYQB0ACAATABvAGMAYQB0AGUAQQBnAGUAbgBjAHkAIABG
AHUAbgBjAHQAaQBvAG4AAH0gAEUAcgByAG8AcgAgAGEAdAAgAEMAdQBzAHQAbwBtAGkAegBlAGQA
IABGAFQAUAAgAFMAYwByAGkAcAB0ACAAVABhAHMAawAgAGEAdAAgAEwAbwBjAGEAdABlAFoAaQBw
AEYAaQBsAGUAIABGAHUAbgBjAHQAaQBvAG4AAICRSQBuAHMAZQByAHQAIABpAG4AdABvACAAZABi
AG8ALgBUAHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBfAEkAbQBwAG8AcgB0AF8ARQByAHIA
bwByAEwAbwBnACAAKABFAHIAcgBvAHIATQBlAHMAcwBhAGcAZQApACAAdgBhAGwAdQBlAHMAIAAo
ACcAAQUnACkAAX9TAFQAXwBiADEAMABmADUANAAyAGMAMgA2AGYAMgA0ADEAYQA1ADkANQBkAGYA
NwBiAGUAMQBhADcAZAA2ADUAYQBkAGIALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAHnyHB2C0apBiUNiodoGOHEABCABAQgDIAABBSABARER
BCABAQ4FIAEBEW0EIAASfRYHDhI9Dg4ODg4ODhJBEkUSSRJNElEOBSAAEoCBBiABEoCFHAQgARwc
BiACAQ4SPQUgAQgSRQUgABKAjQYgARKAkQ4GIAESgJEIBSAAEoCVBCAAEkkDIAAcBCABHA4DIAAO
AyAAAgQgABJRBgADDg4ODgUgAg4ODgUAAg4ODgwHCA4ODg4dDggSUQ4FAAEdDg4DIAAIBCABDggG
AAMBDg4CBgcCElUSPQUgAQESPQgAARKAuRGAvQUgABKAwQcgAgEOEoDBCLd6XFYZNOCJCImEXc2A
gMyRBAAAAAAEAQAAAAMGEmUDBhJpAwYSEAIGCAMGERQKIAcBDg4ODg4ODgQAABJlBAAAEmkFAAEB
EmkEAAASEAMAAAEECAASZQQIABJpBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRp
b25UaHJvd3MBCAEAAgAAAAAALwEAKlNUX2IxMGY1NDJjMjZmMjQxYTU5NWRmN2JlMWE3ZDY1YWRi
LmNzcHJvagAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE0AABJAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAA0DkAAAAAAAAAAAAA6jkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAANw5AAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAABaBAAAAAAAAAAAAABaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEA2FpwHwAAAQDYWnAfPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEugMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAlgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAH4AKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwBiADEAMABmADUANAAyAGMAMgA2AGYAMgA0ADEAYQA1ADkANQBkAGYANwBiAGUAMQBhADcA
ZAA2ADUAYQBkAGIALgBjAHMAcAByAG8AagAAAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBu
AAAAAAAxAC4AMAAuADgAMAA0ADgALgAyADMAMgA1ADYAAAAAAH4ALwABAEkAbgB0AGUAcgBuAGEA
bABOAGEAbQBlAAAAUwBUAF8AYgAxADAAZgA1ADQAMgBjADIANgBmADIANAAxAGEANQA5ADUAZABm
ADcAYgBlADEAYQA3AGQANgA1AGEAZABiAC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAASAASAAEA
TABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAy
ADAAMQA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAACGAC8A
AQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AYgAxADAAZgA1ADQAMgBj
ADIANgBmADIANAAxAGEANQA5ADUAZABmADcAYgBlADEAYQA3AGQANgA1AGEAZABiAC4AYwBzAHAA
cgBvAGoALgBkAGwAbAAAAAAAdgArAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBi
ADEAMABmADUANAAyAGMAMgA2AGYAMgA0ADEAYQA1ADkANQBkAGYANwBiAGUAMQBhADcAZAA2ADUA
YQBkAGIALgBjAHMAcAByAG8AagAAAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgA4ADAANAA4AC4AMgAzADIANQA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkA
IABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADAANAA4AC4AMgAzADIANQA2AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA/DkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="100"
                Column="17" />
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{32C1947B-2394-4D37-8909-0B7B736DE890}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::VarConnType] == &quot;SFTP&quot;"
          DTS:From="Package\Foreach Loop Container 1\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container 1\SFTP Task" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{06CBB7A1-5AB1-415C-B81B-93BF50FA1EB9}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::VarConnType] == &quot;FTP&quot;"
          DTS:From="Package\Foreach Loop Container 1\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Foreach Loop Container 1\Shared Folder File Transfer" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 8]"
          DTS:CreationName=""
          DTS:DTSID="{80C9A8BA-D9CA-49E5-A482-CA3997763AEF}"
          DTS:From="Package\Foreach Loop Container 1\Shared Folder File Transfer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 8"
          DTS:To="Package\Foreach Loop Container 1\Delete Zip Files From FTP Server after Downloading" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{87B797B4-511C-462C-819F-D84448C26465}"
          DTS:ObjectName="{87B797B4-511C-462C-819F-D84448C26465}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::VarAgencyName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{B2AA0ABF-5FE4-4FD1-970C-7B3BFC919240}"
          DTS:ObjectName="{B2AA0ABF-5FE4-4FD1-970C-7B3BFC919240}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::VarConnType" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{A53F571D-468E-487E-BD11-0836926643DD}"
          DTS:ObjectName="{A53F571D-468E-487E-BD11-0836926643DD}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::VarServerName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{2A1C0656-0837-48D2-B5D5-26C5EAA1086D}"
          DTS:ObjectName="{2A1C0656-0837-48D2-B5D5-26C5EAA1086D}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::VarServerUserName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{8DF1DE45-0E48-4F3F-8039-44C52CD8C10F}"
          DTS:ObjectName="{8DF1DE45-0E48-4F3F-8039-44C52CD8C10F}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::VarServerPassword" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{AE7C671B-6A0A-4F40-8BE1-E4B3AF8CA7E8}"
          DTS:ObjectName="{AE7C671B-6A0A-4F40-8BE1-E4B3AF8CA7E8}"
          DTS:ValueIndex="5"
          DTS:VariableName="User::VarServerPort" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{72A37ED6-0970-4677-B3EF-B10FEA91C61C}"
          DTS:ObjectName="{72A37ED6-0970-4677-B3EF-B10FEA91C61C}"
          DTS:ValueIndex="6"
          DTS:VariableName="User::VarLocalPath" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{F9FF0BC8-75FE-4015-8BE8-07B362472EAB}"
          DTS:ObjectName="{F9FF0BC8-75FE-4015-8BE8-07B362472EAB}"
          DTS:ValueIndex="7"
          DTS:VariableName="User::VarRemotePath" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{6C587D2D-306C-450D-BD68-334AE3E93418}"
          DTS:ObjectName="{6C587D2D-306C-450D-BD68-334AE3E93418}"
          DTS:ValueIndex="8"
          DTS:VariableName="User::VarSSHKey" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Unzip, Rename and Stamp"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{431E083F-6B3A-41E4-AC84-1416FAA2E732}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Unzip, Rename and Stamp"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7bdd8dede32d47268cc476b0595cafb4"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::VarAgencyName,User::VarCommandText,User::VarZipFile">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[    /*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using System.Threading;
//using Ionic.Zip;
using Microsoft.SqlServer.Dts.Runtime;
using System.IO.Compression;
using System.Diagnostics;
using docCreator;


namespace ST_7bdd8dede32d47268cc476b0595cafb4.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        static string DataFileName = "", VendorAgencyId = "";
        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
        
        public void Main()
        {
            try
            {
                
                // Unzip Files
                unzipFile();

                // Call the Rename method
                RenameImageFiles();

                // Remove Old files to processed folder
                RemoveOldFiles();

                // TODO: Add your code here
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText);

                // comment throw T.M 11/8/2017
                //throw;
            }

        }

        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
             using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
             {
                 comm.Connection = conn;
                 conn.Open();
                 comm.ExecuteNonQuery();
             }
        }

        public void unzipFile()
        {
            // Added try catch  T.M. 10/9/2017
            try {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName, LocalPath, RemotePath, VendorAgencyID, FileExtension = "";

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    // The following line is to allow ftp process enough time to "let go" of files.
                    System.Threading.Thread.Sleep(3000);

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();
                        VendorAgencyID = row["VendorAgencyID"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);


                        foreach (string FileNameWithPath in AllFiles)
                        {
                            string FileName = Path.GetFileName(FileNameWithPath);
                            //FileExtension = FileName.Substring(FileName.Length - 4);
                            FileExtension = Path.GetExtension(FileName);

                            // Get the size of the zip file and skip files with zero sizes
                            FileInfo FI = new FileInfo(FileNameWithPath);

                            if (File.Exists(LocalPath + "\\" + FileName) && (FileExtension == ".zip" || FileExtension == ".ZIP") && FI.Length > 0 && AgencyName != "CFX")
                            {
                                string SourceZipFile = LocalPath + "\\" + FileName;

                                if (!Directory.Exists(LocalPath + " \\temp")) Directory.CreateDirectory(LocalPath + " \\temp");

                                ZipFile.ExtractToDirectory(SourceZipFile, LocalPath + " \\temp");
                                List<string> fileNames = Directory.GetFiles(LocalPath + " \\temp").ToList();
                                foreach (var item in fileNames)
                                {
                                    string destFile = LocalPath + "\\" + Path.GetFileName(item);
                                    if (File.Exists(destFile)) File.Delete(destFile);
                                    File.Move(item, destFile);
                                }
                                //using (ZipFile fileToUnzip = ZipFile.Read(LocalPath + "\\" + FileName))
                                //{
                                //    fileToUnzip.ExtractAll(LocalPath, ExtractExistingFileAction.OverwriteSilently);
                                //}
                            }
                            // Adding 7 zip for CFX Toll T.M. 2/21/2017
                            else if (File.Exists(LocalPath + "\\" + FileName) && (FileExtension == ".zip" || FileExtension == ".ZIP" || FileExtension == ".7z") && FI.Length > 0 && AgencyName == "CFX")
                            {
                                unzip7(LocalPath + "\\" + FileName, LocalPath + "\\");
                            }
                            else // skipping files with zero size bytes (do not unzip such files)
                            {
                                continue;
                            }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip Rename and Stamp Script Task at Unzip function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }


        // Adding function that uses 7zip to unzip T.M. 2/21/2017
        public void unzip7(string source, string destination)
        {
            string zPath = @"C:\Program Files (x86)\7-Zip\7zG.exe";// change the path and give yours 
            try
            {
                ProcessStartInfo pro = new ProcessStartInfo();
                pro.WindowStyle = ProcessWindowStyle.Hidden;
                pro.FileName = zPath;
                // pro.Arguments = "x \"" + source + "\" -o" + destination + " -pqwerty";
                // Removed password since CFX is not going to use it T.M. 4/17/2017
                pro.Arguments = "x \"" + source + "\" -o" + destination;
                Process x = Process.Start(pro);
                x.WaitForExit();
            }
            catch (System.Exception Ex)
            {
                string s = Ex.ToString();
            }
        }

        public void RenameImageFiles()
        {
            try {
                string AgencyName = null, LocalPath = null;
                string[] AllDataFiles = new string[10];
                // int i = 0;

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select VendorAgencyId, AgencyName, LocalPath from TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {

                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];
                    string OldFileName = "", NewFileName = "", FileExtension = "";

                    int StartPos = 0;

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        VendorAgencyId = row["VendorAgencyId"].ToString();

                        string FHPSourceFolder = "\\\\cwpmapp01\\facc\\facc\\traffic\\tcats\\in\\hold";
                        string[] DataFiles = Directory.GetFiles(FHPSourceFolder);

                        //DateTime Today = DateTime.Now;
                        //string FileDate = Today.ToString("yyyyMMdd");

                        DateTime Yesterday = DateTime.Now;
                        Yesterday = Yesterday.Date.AddDays(-1);
                        string FileDate = Yesterday.ToString("yyyyMMdd");

                        // Get the current data file for FHP
                        if (AgencyName == "FHP")
                        {
                            foreach (string dataFileWithPath in DataFiles)
                            {
                                string DataFileName = Path.GetFileName(dataFileWithPath);
                                if (DataFileName == "07000" + FileDate + "01fcit" || DataFileName == "07000" + FileDate + "02fcit")
                                //if (DataFileName == "070002015032601fcit")
                                {
                                    File.Copy(FHPSourceFolder + "\\" + DataFileName, LocalPath + "\\" + DataFileName, true);
                                }
                            }
                        }

                        //loop through each directory and rename all pdf images to match citation number
                        string[] AllFiles = Directory.GetFiles(LocalPath);
                        foreach (string FileNameWithPath in AllFiles)
                        {
                            OldFileName = Path.GetFileName(FileNameWithPath);
                            FileExtension = Path.GetExtension(FileNameWithPath);
                            if (AgencyName == "Maitland" && (FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                            {
                                StartPos = OldFileName.IndexOf("_") + 1;
                                NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                }
                            }
                            else if (AgencyName == "Edgewood_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Maitland_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Winter_Park_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Orange_County_Clerk" || AgencyName == "Orange_County_Clerk_Test")
                            {
                                if (OldFileName.IndexOf("_") > 0 && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(0, 3) == "UTC")
                                {
                                    StartPos = 8;
                                    NewFileName = OldFileName.Substring(8, 8).TrimEnd().TrimStart().Trim() + ".pdf";
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "FHP")
                            {
                                //if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf")) <-- use this for Apopka Reg Light
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }

                            }
                            /************ New code for Winter Garden, Oakland and Ocoee  T.M. 7/16/2015 *******/
                            else if (AgencyName == "Ocoee")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07042")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Oakland")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07052")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Winter Garden")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07041")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Windermere")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07050")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            /******************************* End code for Winter Garden, Oakland and Ocoee **********************************************/



                            /******************************* Code for Red Light Agencies .. RLCApopkaPD, RLCOrlando and RLCOcoee  *************************/
                            else if (AgencyName == "Apopka-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) + /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            else if (AgencyName == "Ocoee-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) + /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }


                            else if (AgencyName == "Orlando-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) +  /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            /******************************* End of Red Light Code *************************************************************************/

                            else if (AgencyName == "Edgewood" || AgencyName == "Apopka" || AgencyName == "OCSO" || AgencyName == "Eatonville" /*|| AgencyName == "UCF" */)
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf")  && OldFileName.Substring(0, 9) != "CourtInfo" )
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; 
                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            else if (AgencyName == "UCF")
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    //  StartPos = OldFileName.IndexOf("_") + 1;
                                    //  NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    NewFileName = OldFileName.Split('_')[1];
                                    NewFileName = NewFileName + ".pdf";

                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            ////////////////////////////////////////////
                            // Adding CFX Toll T.M. 2/20/2017
                            else if (AgencyName == "CFX")
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";         // <-- Original statement
                                                                                                       // NewFileName = OldFileName.Substring(StartPos, 7) + "Z" + ".pdf";      // <-- to insert a 'Z'
                                                                                                       //NewFileName = OldFileName.Split('_')[1];
                                                                                                       //NewFileName = NewFileName + ".pdf";

                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 7) == "cit.dat")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                        }
                    }

                }
                conn.Close();

                StampImageFile();

                if (DataFileName != null || DataFileName != "")
                {

                }
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip, Rename and Stamp Script Task at RenameImageFiles Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }

        }

        void StampImageFile()
        {
            Neevia.docCreator DC = new Neevia.docCreator();

            DC.setParameter("StampX", "10");
            DC.setParameter("StampY", "20");
            DC.setParameter("StampFontName", "Arial");
            DC.setParameter("StampFontSize", "7");
            DC.setParameter("StampFontColor", "$000000");
            DC.setParameter("StampText", DateTime.Now + " FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");


            //DC.setParameter("StampX", "10");
            //DC.setParameter("StampY", "786");
            //DC.setParameter("StampFontName", "Arial");
            //DC.setParameter("StampFontSize", "7");
            //DC.setParameter("StampFontColor", "$000000");
            //DC.setParameter("StampText", DateTime.Now + " FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");
            
            // Code if you need to stamp files received in the past
            //DC.setParameter("StampText", DateTime.Today.AddDays(-6).ToString("MM/dd/yyyy") + " 2:00:00 AM FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");   // for 2/2/2015 files

            DC.setParameter("PlaceStampOnPages", "1");

            string AgencyName = null, LocalPath = null;

            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select VendorAgencyId, AgencyName, LocalPath from TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
            {
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    AgencyName = row["AgencyName"].ToString();
                    LocalPath = row["LocalPath"].ToString();

                    string[] AllFiles = Directory.GetFiles(LocalPath);
                    foreach (string FileNameWithPath in AllFiles)
                    {
                        string FileName = Path.GetFileName(FileNameWithPath);
                        string FileExtension = Path.GetExtension(FileNameWithPath);

                        if (FileExtension == ".pdf" || FileExtension == ".PDF")
                        {
                            int RVal = DC.stampPDF(LocalPath + "\\" + FileName, LocalPath + "\\" + FileName);
                        }
                    }
                }

            }
            conn.Close();
        }

        public void BCPDataFile(string DataFileName, string VendorAgencyId)
        {

            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            //Call the PCB Stored Procedure
            SqlCommand cmd = new SqlCommand("TrafficCitationImport_ImportCitationFile", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("@File", DataFileName));
            cmd.Parameters.Add(new SqlParameter("@VendorAgencyId", VendorAgencyId));
            cmd.ExecuteNonQuery();

            conn.Close();
        }

        public void RemoveOldFiles()
        {
            try {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName, LocalPath, RemotePath, VendorAgencyID;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();
                        VendorAgencyID = row["VendorAgencyID"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);

                        //Remove old Files to Processed folder then delete them from current folder
                        foreach (string Filename in AllFiles)
                        {
                            string FileExtension = Path.GetExtension(Filename);
                            string FileWithExtention = Path.GetFileName(Filename);

                            string Name = Path.GetFileNameWithoutExtension(Filename);

                            if (FileExtension == ".pdf" || FileExtension == ".PDF")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".pdf", true);
                            }
                            else if (FileExtension == ".zip" || FileExtension == ".ZIP")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".zip", true);
                            }
                            else if (FileExtension == ".dat")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".dat", true);
                            }
                            else if (Name.Substring(Name.Length - 3) == "cit")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name, true);
                            }
                            else { }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip Rename and Stamp Script Task at RemoveOldFiles Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        public void ImportFileLog_Insert(string DataFile, string VendorAgencyId)
        {
            //string text = null;
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            SqlCommand comm = new SqlCommand("insert into TrafficCitation_ImportFileLog (FileDate,FileName,ProcessStatus, VendorAgencyId) values('" + DateTime.Today + "','" + DataFile + "','" + "Pending" + "','" + VendorAgencyId + "'" + ")", conn);
            comm.ExecuteNonQuery();

            /* Use the following two lines to debug */
           // text = comm.CommandText;
           // Dts.Variables["VarCommandText"].Value = text;

            conn.Close();
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="st_7bdd8dede32d47268cc476b0595cafb4.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_7bdd8dede32d47268cc476b0595cafb4.csproj</RootNamespace>
    <AssemblyName>ST_7bdd8dede32d47268cc476b0595cafb4.csproj</AssemblyName>
    <ProjectGuid>{9ACFC7C0-8781-4576-A635-19FCDD030E42}</ProjectGuid>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <RegisterForComInterop>true</RegisterForComInterop>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="crNET">
      <HintPath>C:\Libs\crNET.dll</HintPath>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="doccreator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=a607c4e9768579a9, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Users\astill\source\Workspaces\Odyssey\TrafficCitationImport\ExternalLibraries\docCreator.dll</HintPath>
    </Reference>
    <Reference Include="Renci.SshNet, Version=2014.4.6.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\astill\source\Workspaces\Odyssey\TrafficCitationImport\ExternalLibraries\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_7bdd8dede32d47268cc476b0595cafb4</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_7bdd8dede32d47268cc476b0595cafb4</msb:DisplayName>
    <msb:ProjectId>{55267E0E-4049-43E8-97ED-2488658B9AEC}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_7bdd8dede32d47268cc476b0595cafb4.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_7bdd8dede32d47268cc476b0595cafb4.csproj.Properties.Settings.get_Default():ST_7bdd8dede32d47268cc476b0595cafb4.csproj.Properties.Sett" +
    "ings")]

namespace ST_7bdd8dede32d47268cc476b0595cafb4.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7bdd8dede32d47268cc476b0595cafb4.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7bdd8dede32d47268cc476b0595cafb4.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6413
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ST_7bdd8dede32d47268cc476b0595cafb4.csproj.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7bdd8dede32d47268cc476b0595cafb4.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{DA82C463-0CE0-40B6-BFDE-F7611A60195E}"
      DTS:From="Package\Foreach Loop Container 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Unzip, Rename and Stamp" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{7059ABDC-2AB9-4FE2-A6D1-46337AAB77AC}"
      DTS:From="Package\Delete Old Files Downloaded From SFTP Server"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Execute SQL Task 1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{CB0D46F8-7918-45A0-81A3-47E19E8E2290}"
      DTS:From="Package\Execute SQL Task 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Foreach Loop Container 1" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="185,44"
          Id="Package\Delete Old Files Downloaded From SFTP Server"
          TopLeft="419.154195607776,4.32719283158698" />
        <NodeLayout
          Size="179,42"
          Id="Package\Execute SQL Task 1"
          TopLeft="440.710873112252,57.49303013128" />
        <NodeLayout
          Size="213,42"
          Id="Package\Foreach Loop Container 1\Shared Folder File Transfer"
          TopLeft="197.547169811321,68.8490566037736" />
        <NodeLayout
          Size="141,56"
          Id="Package\Foreach Loop Container 1\Delete Zip Files From FTP Server after Downloading"
          TopLeft="181.735849056604,133.528301886792" />
        <NodeLayout
          Size="109,44"
          Id="Package\Foreach Loop Container 1\Script Task"
          TopLeft="122.792452830189,6.05660377358493" />
        <NodeLayout
          Size="128,42"
          Id="Package\Foreach Loop Container 1\SFTP Task"
          TopLeft="41.0188679245284,69.2641509433962" />
        <EdgeLayout
          Id="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint]"
          TopLeft="122.792452830189,28.0566037735849">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-17.7735849056606,41.2075471698113"
              Start="0,0"
              End="-17.7735849056606,33.7075471698113">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-13.7735849056606,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-13.7735849056606,0"
                    Point2="-17.7735849056606,0"
                    Point3="-17.7735849056606,4" />
                  <mssgle:LineSegment
                    End="-17.7735849056606,33.7075471698113" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.7735849056606,-22,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 1]"
          TopLeft="231.792452830189,28.0566037735849">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="72.254716981132,40.7924528301887"
              Start="0,0"
              End="72.254716981132,33.2924528301887">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="68.254716981132,0" />
                  <mssgle:CubicBezierSegment
                    Point1="68.254716981132,0"
                    Point2="72.254716981132,0"
                    Point3="72.254716981132,4" />
                  <mssgle:LineSegment
                    End="72.254716981132,33.2924528301887" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="64.254716981132,-22,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 8]"
          TopLeft="304.047169811321,110.849056603774">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-51.811320754717,22.6792452830184"
              Start="0,0"
              End="-51.811320754717,15.1792452830184">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,7.3396226415092" />
                  <mssgle:CubicBezierSegment
                    Point1="0,7.3396226415092"
                    Point2="0,11.3396226415092"
                    Point3="-4,11.3396226415092" />
                  <mssgle:LineSegment
                    End="-47.811320754717,11.3396226415092" />
                  <mssgle:CubicBezierSegment
                    Point1="-47.811320754717,11.3396226415092"
                    Point2="-51.811320754717,11.3396226415092"
                    Point3="-51.811320754717,15.3396226415092" />
                  <mssgle:LineSegment
                    End="-51.811320754717,15.1792452830184" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="421,246"
          Size="421,289"
          Id="Package\Foreach Loop Container 1"
          TopLeft="373.165746622384,136.222851302628" />
        <NodeLayout
          Size="204,42"
          Id="Package\Unzip, Rename and Stamp"
          TopLeft="507.988918621955,462.148606295481" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="583.665746622384,425.222851302628">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="26.3231719995711,36.925754992853"
              Start="0,0"
              End="26.3231719995711,29.425754992853">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.4628774964265" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.4628774964265"
                    Point2="0,18.4628774964265"
                    Point3="4,18.4628774964265" />
                  <mssgle:LineSegment
                    End="22.3231719995711,18.4628774964265" />
                  <mssgle:CubicBezierSegment
                    Point1="22.3231719995711,18.4628774964265"
                    Point2="26.3231719995711,18.4628774964265"
                    Point3="26.3231719995711,22.4628774964265" />
                  <mssgle:LineSegment
                    End="26.3231719995711,29.425754992853" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="419.154195607776,26.327192831587">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="21.556677504476,52.165837299693"
              Start="0,0"
              End="14.056677504476,52.165837299693">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,48.165837299693" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,48.165837299693"
                    Point2="-22.5,52.165837299693"
                    Point3="-18.5,52.165837299693" />
                  <mssgle:LineSegment
                    End="14.056677504476,52.165837299693" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="530.210873112252,99.49303013128">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="53.454873510132,36.729821171348"
              Start="0,0"
              End="53.454873510132,29.229821171348">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.364910585674" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.364910585674"
                    Point2="0,18.364910585674"
                    Point3="4,18.364910585674" />
                  <mssgle:LineSegment
                    End="49.454873510132,18.364910585674" />
                  <mssgle:CubicBezierSegment
                    Point1="49.454873510132,18.364910585674"
                    Point2="53.454873510132,18.364910585674"
                    Point3="53.454873510132,22.364910585674" />
                  <mssgle:LineSegment
                    End="53.454873510132,29.229821171348" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>